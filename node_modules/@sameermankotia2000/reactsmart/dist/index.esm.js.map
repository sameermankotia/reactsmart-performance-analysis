{"version":3,"file":"index.esm.js","sources":["../src/core/BehaviorAnalysis.js","../src/core/PredictionEngine.js","../src/core/DynamicComponentLoader.js","../src/core/utils/networkUtils.js","../src/core/utils/storageUtils.js","../src/core/utils/privacyUtils.js","../src/react/ReactSmartProvider.js","../src/react/withReactSmart.js","../src/react/SmartRoute.js","../src/react/hooks/usecomponentTracker.js","../src/react/hooks/useNetworkAware.js","../src/core/AdaptiveLoadingQueue.js","../src/prediction/markovChain.js","../src/prediction/probabilistic.js","../src/prediction/transformerModel.js"],"sourcesContent":["/**\n * User Behavior Analysis Module\n * \n * Tracks and analyzes user interactions to identify patterns and\n * predict future component requirements.\n */\nclass BehaviorAnalysis {\n    /**\n     * Create a new BehaviorAnalysis instance\n     * @param {Object} options - Configuration options\n     * @param {boolean} options.anonymizeData - Whether to anonymize interaction data\n     * @param {string} options.privacyCompliance - Privacy compliance mode ('gdpr', 'ccpa', etc.)\n     */\n    constructor(options = {}) {\n      this.options = {\n        anonymizeData: true,\n        privacyCompliance: 'gdpr',\n        ...options\n      };\n      \n      // Initialize data structures\n      this.interactionHistory = [];\n      this.componentGraph = new Map(); // Graph representing component relationships\n      this.weightedEvents = new Map(); // Map of event types to weights\n      this.sessionStart = Date.now();\n      \n      // Initialize event weights\n      this.initializeEventWeights();\n    }\n    \n    /**\n     * Initialize weights for different event types\n     * Higher weights indicate stronger predictive value\n     */\n    initializeEventWeights() {\n      // Core navigation events have high weights\n      this.weightedEvents.set('click', 0.9);\n      this.weightedEvents.set('navigation', 0.95);\n      this.weightedEvents.set('form-submit', 0.85);\n      \n      // Intent-signaling events have medium-high weights\n      this.weightedEvents.set('hover', 0.7);\n      this.weightedEvents.set('focus', 0.65);\n      this.weightedEvents.set('scroll-end', 0.6);\n      \n      // Passive or incidental events have lower weights\n      this.weightedEvents.set('mousemove', 0.2);\n      this.weightedEvents.set('scroll', 0.4);\n      this.weightedEvents.set('visibility', 0.5);\n    }\n    \n    /**\n     * Record a user interaction with a component\n     * @param {string} componentId - ID of the component interacted with\n     * @param {Object} data - Data about the interaction\n     */\n    recordInteraction(componentId, data) {\n      const timestamp = Date.now();\n      const eventType = data.type || 'unknown';\n      const eventWeight = this.weightedEvents.get(eventType) || 0.3;\n      \n      // Calculate interaction metric using the weighted sum formula\n      // InteractionMetric = ∑(w_i × EventWeight(e_i))\n      const interactionMetric = this.calculateInteractionMetric(data, eventWeight);\n      \n      // Store the interaction\n      const interaction = {\n        componentId,\n        timestamp,\n        eventType,\n        eventWeight,\n        interactionMetric,\n        sessionTime: timestamp - this.sessionStart,\n        ...data\n      };\n      \n      this.interactionHistory.push(interaction);\n      \n      // Update the component relationship graph\n      this.updateComponentGraph(componentId, interaction);\n      \n      // Prune old data if necessary\n      this.pruneOldData();\n      \n      return interaction;\n    }\n    \n    /**\n     * Calculate the interaction metric for an event\n     * @param {Object} data - Interaction data\n     * @param {number} baseWeight - Base weight for this event type\n     * @returns {number} - Calculated interaction metric\n     */\n    calculateInteractionMetric(data, baseWeight) {\n      let metric = baseWeight;\n      \n      // Adjust based on interaction duration if available\n      if (data.duration) {\n        // Normalize duration (longer interactions may indicate higher interest)\n        const durationFactor = Math.min(data.duration / 1000, 10) / 10;\n        metric *= (1 + durationFactor * 0.5);\n      }\n      \n      // Adjust based on viewport coverage if available\n      if (data.viewportCoverage) {\n        // Higher coverage may indicate more significant content\n        metric *= (1 + data.viewportCoverage * 0.3);\n      }\n      \n      // Adjust based on recency (more recent interactions are more relevant)\n      if (data.recency) {\n        const recencyFactor = 1 - Math.min(data.recency / 60000, 5) / 5;\n        metric *= recencyFactor;\n      }\n      \n      return metric;\n    }\n    \n    /**\n     * Update the component relationship graph\n     * @param {string} componentId - Current component ID\n     * @param {Object} interaction - Interaction data\n     */\n    updateComponentGraph(componentId, interaction) {\n      // Initialize this component in the graph if it doesn't exist\n      if (!this.componentGraph.has(componentId)) {\n        this.componentGraph.set(componentId, new Map());\n      }\n      \n      // Find the previous interaction (if any) to establish relationship\n      const recentInteractions = this.getRecentInteractions(5);\n      \n      if (recentInteractions.length > 1) {\n        // Get the most recent different component interaction\n        const previousInteractions = recentInteractions.filter(\n          i => i.componentId !== componentId\n        );\n        \n        if (previousInteractions.length > 0) {\n          const previousInteraction = previousInteractions[0];\n          const previousComponentId = previousInteraction.componentId;\n          \n          // Update edge weight between previous and current component\n          const componentRelationships = this.componentGraph.get(previousComponentId) || new Map();\n          const currentWeight = componentRelationships.get(componentId) || 0;\n          \n          // Weighted sum of previous weight and new interaction\n          const newWeight = currentWeight * 0.7 + interaction.interactionMetric * 0.3;\n          componentRelationships.set(componentId, newWeight);\n          \n          // Ensure the previous component exists in the graph\n          if (!this.componentGraph.has(previousComponentId)) {\n            this.componentGraph.set(previousComponentId, componentRelationships);\n          } else {\n            this.componentGraph.set(previousComponentId, componentRelationships);\n          }\n        }\n      }\n    }\n    \n    /**\n     * Get the most recent interactions\n     * @param {number} count - Number of interactions to return\n     * @returns {Array} - Recent interactions\n     */\n    getRecentInteractions(count) {\n      return this.interactionHistory\n        .slice(-count)\n        .sort((a, b) => b.timestamp - a.timestamp);\n    }\n    \n    /**\n     * Remove old interaction data to prevent memory growth\n     */\n    pruneOldData() {\n      const now = Date.now();\n      const maxAgeMs = 30 * 60 * 1000; // 30 minutes\n      \n      // Remove interactions older than maxAge\n      this.interactionHistory = this.interactionHistory.filter(\n        interaction => (now - interaction.timestamp) < maxAgeMs\n      );\n    }\n    \n    /**\n     * Get current user behavior patterns\n     * @returns {Object} - Current behavior patterns and component relationships\n     */\n    getCurrentPatterns() {\n      return {\n        recentInteractions: this.getRecentInteractions(10),\n        componentRelationships: this.serializeComponentGraph(),\n        interactionDensity: this.calculateInteractionDensity(),\n        primaryComponents: this.identifyPrimaryComponents(5)\n      };\n    }\n    \n    /**\n     * Convert the component graph to a serializable format\n     * @returns {Array} - Serialized graph\n     */\n    serializeComponentGraph() {\n      const serialized = [];\n      \n      // Convert the nested maps to an array of relationship objects\n      this.componentGraph.forEach((relationships, sourceId) => {\n        relationships.forEach((weight, targetId) => {\n          serialized.push({\n            source: sourceId,\n            target: targetId,\n            weight: weight\n          });\n        });\n      });\n      \n      return serialized;\n    }\n    \n    /**\n     * Calculate interaction density (interactions per minute)\n     * @returns {number} - Interaction density\n     */\n    calculateInteractionDensity() {\n      const sessionDurationMinutes = (Date.now() - this.sessionStart) / 60000;\n      return this.interactionHistory.length / Math.max(sessionDurationMinutes, 0.1);\n    }\n    \n    /**\n     * Identify the most important components based on interaction metrics\n     * @param {number} count - Number of components to return\n     * @returns {Array} - Primary components with their importance scores\n     */\n    identifyPrimaryComponents(count) {\n      // Aggregate interaction metrics by component\n      const componentMetrics = new Map();\n      \n      this.interactionHistory.forEach(interaction => {\n        const currentMetric = componentMetrics.get(interaction.componentId) || 0;\n        componentMetrics.set(\n          interaction.componentId, \n          currentMetric + interaction.interactionMetric\n        );\n      });\n      \n      // Convert to array and sort by metric\n      return Array.from(componentMetrics.entries())\n        .map(([componentId, metric]) => ({ componentId, importance: metric }))\n        .sort((a, b) => b.importance - a.importance)\n        .slice(0, count);\n    }\n    \n    /**\n     * Calculate the user's interaction pattern complexity\n     * Higher complexity may indicate more sophisticated user behavior\n     * @returns {number} - Complexity score between 0 and 1\n     */\n    calculatePatternComplexity() {\n      // Calculate based on variety of components and event types\n      const uniqueComponents = new Set(\n        this.interactionHistory.map(i => i.componentId)\n      ).size;\n      \n      const uniqueEventTypes = new Set(\n        this.interactionHistory.map(i => i.eventType)\n      ).size;\n      \n      // Calculate graph density (ratio of actual to possible edges)\n      const componentCount = this.componentGraph.size;\n      let edgeCount = 0;\n      \n      this.componentGraph.forEach(relationships => {\n        edgeCount += relationships.size;\n      });\n      \n      const maxPossibleEdges = componentCount * (componentCount - 1);\n      const graphDensity = maxPossibleEdges > 0 ? edgeCount / maxPossibleEdges : 0;\n      \n      // Combine factors into a single complexity score\n      const componentVariety = Math.min(uniqueComponents / 10, 1);\n      const eventVariety = Math.min(uniqueEventTypes / this.weightedEvents.size, 1);\n      \n      return (componentVariety * 0.4 + eventVariety * 0.3 + graphDensity * 0.3);\n    }\n    \n    /**\n     * Detect user navigation patterns\n     * @returns {Object} - Detected patterns\n     */\n    detectNavigationPatterns() {\n      const patterns = {\n        linear: 0,\n        branching: 0,\n        cyclic: 0,\n        dominant: 'unknown'\n      };\n      \n      // Analyze component graph to detect patterns\n      if (this.componentGraph.size > 3) {\n        // Calculate outdegree distribution for linearity assessment\n        const outDegrees = [];\n        this.componentGraph.forEach(relationships => {\n          outDegrees.push(relationships.size);\n        });\n        \n        // Calculate average outdegree\n        const avgOutDegree = outDegrees.reduce((sum, deg) => sum + deg, 0) / outDegrees.length;\n        \n        // Linear patterns have low average outdegree\n        if (avgOutDegree < 1.5) {\n          patterns.linear = 0.7;\n        }\n        \n        // Branching patterns have high variance in outdegree\n        const variance = outDegrees.reduce((sum, deg) => sum + Math.pow(deg - avgOutDegree, 2), 0) / outDegrees.length;\n        if (variance > 1) {\n          patterns.branching = 0.6 + Math.min(variance / 10, 0.3);\n        }\n        \n        // Detect cyclic patterns using simple cycle detection\n        const cycles = this.detectCycles();\n        if (cycles > 0) {\n          patterns.cyclic = Math.min(cycles / 5, 0.9);\n        }\n        \n        // Determine dominant pattern\n        const patternScores = [\n          { type: 'linear', score: patterns.linear },\n          { type: 'branching', score: patterns.branching },\n          { type: 'cyclic', score: patterns.cyclic }\n        ];\n        \n        const dominantPattern = patternScores.sort((a, b) => b.score - a.score)[0];\n        patterns.dominant = dominantPattern.score > 0.3 ? dominantPattern.type : 'mixed';\n      }\n      \n      return patterns;\n    }\n    \n    /**\n     * Detect cycles in the component graph\n     * @returns {number} - Number of cycles detected\n     */\n    detectCycles() {\n      let cycleCount = 0;\n      const visited = new Set();\n      const recursionStack = new Set();\n      \n      // Simple DFS-based cycle detection\n      const detectCyclesFromNode = (nodeId, path = []) => {\n        visited.add(nodeId);\n        recursionStack.add(nodeId);\n        path.push(nodeId);\n        \n        const neighbors = this.componentGraph.get(nodeId) || new Map();\n        \n        neighbors.forEach((weight, neighborId) => {\n          if (!visited.has(neighborId)) {\n            if (detectCyclesFromNode(neighborId, [...path])) {\n              cycleCount++;\n            }\n          } else if (recursionStack.has(neighborId)) {\n            // Found a cycle\n            const cycleStart = path.indexOf(neighborId);\n            if (cycleStart >= 0 && path.length - cycleStart >= 3) {\n              cycleCount++;\n            }\n          }\n        });\n        \n        recursionStack.delete(nodeId);\n        return false;\n      };\n      \n      // Check from each node\n      this.componentGraph.forEach((_, nodeId) => {\n        if (!visited.has(nodeId)) {\n          detectCyclesFromNode(nodeId);\n        }\n      });\n      \n      return cycleCount;\n    }\n    \n    /**\n     * Generate a feature vector for machine learning models\n     * @returns {Array} - Feature vector representing current user behavior\n     */\n    generateFeatureVector() {\n      const features = [];\n      \n      // Add interaction density\n      features.push(this.calculateInteractionDensity());\n      \n      // Add pattern complexity\n      features.push(this.calculatePatternComplexity());\n      \n      // Add recency-weighted component usage\n      const recentInteractions = this.getRecentInteractions(5);\n      const recentComponentIds = recentInteractions.map(i => i.componentId);\n      \n      // Create a fixed-size feature vector for recent components\n      // (using one-hot encoding for a predefined set of components)\n      // This would typically be customized based on the application\n      \n      // Add navigation pattern features\n      const patterns = this.detectNavigationPatterns();\n      features.push(patterns.linear);\n      features.push(patterns.branching);\n      features.push(patterns.cyclic);\n      \n      return features;\n    }\n    \n    /**\n     * Reset the analysis data\n     */\n    reset() {\n      this.interactionHistory = [];\n      this.componentGraph = new Map();\n      this.sessionStart = Date.now();\n    }\n    \n    /**\n     * Export analysis data in a standardized format\n     * @returns {Object} - Exportable analysis data\n     */\n    exportAnalysisData() {\n      return {\n        sessionId: this.sessionStart.toString(),\n        sessionDuration: (Date.now() - this.sessionStart) / 1000,\n        interactionCount: this.interactionHistory.length,\n        interactionDensity: this.calculateInteractionDensity(),\n        patternComplexity: this.calculatePatternComplexity(),\n        navigationPatterns: this.detectNavigationPatterns(),\n        componentGraph: this.serializeComponentGraph(),\n        primaryComponents: this.identifyPrimaryComponents(10)\n      };\n    }\n  }\n  \n  export default BehaviorAnalysis;","/**\n * ML-based Prediction Engine\n * \n * Core prediction module that analyzes user behavior patterns\n * to predict which components will be needed next.\n */\nclass PredictionEngine {\n    /**\n     * Create a new PredictionEngine instance\n     * @param {Object} options - Configuration options\n     * @param {number} options.learningRate - Learning rate for model updates\n     * @param {string} options.modelType - Type of prediction model to use\n     */\n    constructor(options = {}) {\n      this.options = {\n        learningRate: 0.03,\n        modelType: 'probabilistic', // 'probabilistic', 'markovChain', 'transformer'\n        ...options\n      };\n      \n      // Initialize data structures\n      this.transitionMatrix = new Map(); // For probabilistic predictions\n      this.predictions = new Map(); // Current predictions\n      this.confidenceThresholds = {\n        high: 0.75,\n        medium: 0.40,\n        low: 0.20\n      };\n      \n      // Performance metrics for self-evaluation\n      this.metrics = {\n        correctPredictions: 0,\n        totalPredictions: 0,\n        lastAccuracy: 0\n      };\n    }\n    \n    /**\n     * Predict which components will be needed based on user behavior\n     * @param {Object} userPatterns - Current user behavior patterns\n     * @param {Array} registeredComponents - List of registered components\n     * @returns {Array} - Component predictions with probabilities\n     */\n    predictComponentUsage(userPatterns, registeredComponents) {\n      if (!userPatterns || !registeredComponents) {\n        return [];\n      }\n      \n      // Select prediction method based on configuration\n      switch (this.options.modelType) {\n        case 'markovChain':\n          return this.predictUsingMarkovChain(userPatterns, registeredComponents);\n        case 'transformer':\n          return this.predictUsingTransformer(userPatterns, registeredComponents);\n        case 'probabilistic':\n        default:\n          return this.predictUsingProbabilistic(userPatterns, registeredComponents);\n      }\n    }\n    \n    /**\n     * Predict component usage using probabilistic model\n     * Based on the formula: P(c_i|c_j) = N(c_i,c_j) / ∑_k N(c_k,c_j)\n     * \n     * @param {Object} userPatterns - Current user behavior patterns\n     * @param {Array} registeredComponents - List of registered components\n     * @returns {Array} - Component predictions with probabilities\n     */\n    predictUsingProbabilistic(userPatterns, registeredComponents) {\n      const predictions = [];\n      const { recentInteractions, componentRelationships, primaryComponents } = userPatterns;\n      \n      // Update transition matrix with new relationship data\n      this.updateTransitionMatrix(componentRelationships);\n      \n      // Use recent interactions to identify current context\n      const currentComponents = new Set(\n        recentInteractions\n          .slice(0, 3)\n          .map(interaction => interaction.componentId)\n      );\n      \n      // Generate predictions for each registered component\n      registeredComponents.forEach(component => {\n        const componentId = component.id;\n        \n        // Skip components already in current context\n        if (currentComponents.has(componentId)) {\n          return;\n        }\n        \n        let probability = 0;\n        let confidence = 0;\n        \n        // Calculate probability based on component relationships\n        currentComponents.forEach(currentId => {\n          // Get transition probability using the conditional probability formula\n          const transitionProb = this.getTransitionProbability(currentId, componentId);\n          \n          // Weighted sum of probabilities from different current components\n          probability += transitionProb * 0.7;\n          \n          // Increase confidence if we have seen this transition before\n          if (transitionProb > 0) {\n            confidence += 0.3;\n          }\n        });\n        \n        // Incorporate primary component data\n        const isPrimaryComponent = primaryComponents.some(\n          pc => pc.componentId === componentId\n        );\n        \n        if (isPrimaryComponent) {\n          const primaryData = primaryComponents.find(\n            pc => pc.componentId === componentId\n          );\n          \n          // Normalize importance score to [0, 0.3] range\n          const normalizedImportance = Math.min(primaryData.importance / 10, 0.3);\n          \n          // Boost probability based on component importance\n          probability += normalizedImportance;\n          confidence += 0.2;\n        }\n        \n        // Ensure probability is in [0, 1] range\n        probability = Math.max(0, Math.min(probability, 1));\n        \n        // Add prediction if probability exceeds low threshold\n        if (probability > this.confidenceThresholds.low) {\n          predictions.push({\n            componentId,\n            probability,\n            confidence,\n            priority: this.getPriorityFromProbability(probability)\n          });\n        }\n      });\n      \n      // Sort by probability (highest first)\n      return predictions.sort((a, b) => b.probability - a.probability);\n    }\n    \n    /**\n     * Update the transition matrix with new relationship data\n     * @param {Array} relationships - Component relationship data\n     */\n    updateTransitionMatrix(relationships) {\n      relationships.forEach(relationship => {\n        const { source, target, weight } = relationship;\n        \n        // Initialize source map if it doesn't exist\n        if (!this.transitionMatrix.has(source)) {\n          this.transitionMatrix.set(source, new Map());\n        }\n        \n        const sourceMap = this.transitionMatrix.get(source);\n        const currentWeight = sourceMap.get(target) || 0;\n        \n        // Update weight using exponential moving average with learning rate\n        const newWeight = currentWeight * (1 - this.options.learningRate) + \n                          weight * this.options.learningRate;\n        \n        sourceMap.set(target, newWeight);\n      });\n      \n      // Normalize transition probabilities\n      this.normalizeTransitionMatrix();\n    }\n    \n    /**\n     * Normalize the transition matrix so probabilities sum to 1\n     */\n    normalizeTransitionMatrix() {\n      this.transitionMatrix.forEach((transitions, sourceId) => {\n        const total = Array.from(transitions.values()).reduce((sum, val) => sum + val, 0);\n        \n        if (total > 0) {\n          transitions.forEach((value, targetId) => {\n            transitions.set(targetId, value / total);\n          });\n        }\n      });\n    }\n    \n    /**\n     * Get transition probability between two components\n     * @param {string} sourceId - Source component ID\n     * @param {string} targetId - Target component ID\n     * @returns {number} - Transition probability\n     */\n    getTransitionProbability(sourceId, targetId) {\n      const sourceTransitions = this.transitionMatrix.get(sourceId);\n      \n      if (!sourceTransitions) {\n        return 0;\n      }\n      \n      return sourceTransitions.get(targetId) || 0;\n    }\n    \n    /**\n     * Determine priority level based on probability\n     * @param {number} probability - Prediction probability\n     * @returns {string} - Priority level (high, medium, low)\n     */\n    getPriorityFromProbability(probability) {\n      if (probability >= this.confidenceThresholds.high) {\n        return 'high';\n      } else if (probability >= this.confidenceThresholds.medium) {\n        return 'medium';\n      } else {\n        return 'low';\n      }\n    }\n    \n    /**\n     * Predict component usage using Markov Chain model\n     * This method considers sequences of component usage rather than\n     * just pairwise relationships\n     * \n     * @param {Object} userPatterns - Current user behavior patterns\n     * @param {Array} registeredComponents - List of registered components\n     * @returns {Array} - Component predictions with probabilities\n     */\n    predictUsingMarkovChain(userPatterns, registeredComponents) {\n      // Implementation of Markov Chain prediction\n      // This is a more sophisticated version of probabilistic prediction\n      // that considers sequences of states\n      \n      const predictions = [];\n      const { recentInteractions } = userPatterns;\n      \n      // Create a sequence of recently used components (states)\n      const recentSequence = recentInteractions\n        .slice(0, 5)\n        .map(interaction => interaction.componentId);\n      \n      // Get target components (excluding those in recent sequence)\n      const targetComponents = registeredComponents\n        .filter(component => !recentSequence.includes(component.id));\n      \n      // For each target component, calculate transition probability\n      // based on sequence history\n      targetComponents.forEach(component => {\n        const componentId = component.id;\n        let probability = 0;\n        \n        // Implementation would use n-gram analysis of sequences\n        // with back-off to lower-order models when needed\n        \n        // For this implementation, we'll use the probabilistic model\n        // as a fallback since full Markov Chain requires more state\n        probability = this.calculateMarkovProbability(recentSequence, componentId);\n        \n        if (probability > this.confidenceThresholds.low) {\n          predictions.push({\n            componentId,\n            probability,\n            confidence: Math.min(probability + 0.1, 1),\n            priority: this.getPriorityFromProbability(probability)\n          });\n        }\n      });\n      \n      return predictions.sort((a, b) => b.probability - a.probability);\n    }\n    \n    /**\n     * Calculate Markov Chain transition probability\n     * @param {Array} sequence - Sequence of component IDs\n     * @param {string} targetId - Target component ID\n     * @returns {number} - Transition probability\n     */\n    calculateMarkovProbability(sequence, targetId) {\n      // Simplified implementation using first-order Markov model\n      // A full implementation would use higher-order models\n      \n      if (sequence.length === 0) {\n        return 0;\n      }\n      \n      // Use the most recent component as the current state\n      const currentId = sequence[0];\n      \n      // Fall back to the probabilistic model\n      return this.getTransitionProbability(currentId, targetId);\n    }\n    \n    /**\n     * Predict component usage using Transformer-based model\n     * This is an experimental approach for sequence modeling\n     * \n     * @param {Object} userPatterns - Current user behavior patterns\n     * @param {Array} registeredComponents - List of registered components\n     * @returns {Array} - Component predictions with probabilities\n     */\n    predictUsingTransformer(userPatterns, registeredComponents) {\n      // In a real implementation, this would use a pre-trained transformer model\n      // or integrate with a machine learning service\n      \n      // For this implementation, we'll use the probabilistic model as a fallback\n      const predictions = this.predictUsingProbabilistic(userPatterns, registeredComponents);\n      \n      // Apply additional sequence-aware adjustments\n      // This simulates the enhanced capabilities of a transformer model\n      return predictions.map(prediction => {\n        const { componentId, probability } = prediction;\n        \n        // Enhance prediction with sequence awareness (simulated)\n        const enhancedProbability = Math.min(probability * 1.2, 1.0);\n        \n        return {\n          ...prediction,\n          probability: enhancedProbability,\n          confidence: Math.min(enhancedProbability + 0.15, 1),\n          priority: this.getPriorityFromProbability(enhancedProbability),\n          model: 'transformer'\n        };\n      });\n    }\n    \n    /**\n     * Update prediction metrics based on actual component usage\n     * @param {string} componentId - Component that was actually used\n     */\n    updateMetrics(componentId) {\n      // Increment total predictions counter\n      this.metrics.totalPredictions++;\n      \n      // Check if this component was predicted\n      const prediction = this.predictions.get(componentId);\n      \n      if (prediction) {\n        // This was a correct prediction\n        this.metrics.correctPredictions++;\n      }\n      \n      // Update accuracy\n      this.metrics.lastAccuracy = this.metrics.correctPredictions / this.metrics.totalPredictions;\n      \n      // Adjust confidence thresholds based on accuracy trend\n      this.adjustConfidenceThresholds();\n    }\n    \n    /**\n     * Dynamically adjust confidence thresholds based on prediction performance\n     */\n    adjustConfidenceThresholds() {\n      // Only adjust after sufficient predictions\n      if (this.metrics.totalPredictions < 50) {\n        return;\n      }\n      \n      // If accuracy is high, we can be more aggressive with preloading\n      // by lowering thresholds\n      if (this.metrics.lastAccuracy > 0.85) {\n        this.confidenceThresholds.high = Math.max(this.confidenceThresholds.high * 0.95, 0.6);\n        this.confidenceThresholds.medium = Math.max(this.confidenceThresholds.medium * 0.95, 0.3);\n        this.confidenceThresholds.low = Math.max(this.confidenceThresholds.low * 0.95, 0.1);\n      } \n      // If accuracy is low, be more conservative with predictions\n      else if (this.metrics.lastAccuracy < 0.65) {\n        this.confidenceThresholds.high = Math.min(this.confidenceThresholds.high * 1.05, 0.9);\n        this.confidenceThresholds.medium = Math.min(this.confidenceThresholds.medium * 1.05, 0.6);\n        this.confidenceThresholds.low = Math.min(this.confidenceThresholds.low * 1.05, 0.3);\n      }\n    }\n    \n    /**\n     * Get current prediction metrics\n     * @returns {Object} - Current prediction metrics\n     */\n    getMetrics() {\n      return {\n        totalPredictions: this.metrics.totalPredictions,\n        correctPredictions: this.metrics.correctPredictions,\n        accuracy: this.metrics.lastAccuracy,\n        confidenceThresholds: { ...this.confidenceThresholds }\n      };\n    }\n    \n    /**\n     * Reset prediction engine state\n     */\n    reset() {\n      this.transitionMatrix = new Map();\n      this.predictions = new Map();\n      this.metrics = {\n        correctPredictions: 0,\n        totalPredictions: 0,\n        lastAccuracy: 0\n      };\n      // Reset confidence thresholds to defaults\n      this.confidenceThresholds = {\n        high: 0.75,\n        medium: 0.40,\n        low: 0.20\n      };\n    }\n  }\n  \n  export default PredictionEngine;","/**\n * Dynamic Component Loader\n * \n * Manages the loading of components based on predictions and\n * system conditions, optimizing resource utilization.\n */\nclass DynamicComponentLoader {\n    /**\n     * Create a new DynamicComponentLoader instance\n     * @param {Object} options - Configuration options\n     * @param {boolean} options.networkAdaptation - Whether to adapt to network conditions\n     * @param {number} options.preloadBatchSize - Maximum components to preload at once\n     * @param {boolean} options.usePriority - Whether to use priority-based loading\n     */\n    constructor(options = {}) {\n      this.options = {\n        networkAdaptation: true,\n        preloadBatchSize: 3,\n        usePriority: true,\n        ...options\n      };\n      \n      // Initialize data structures\n      this.registeredComponents = new Map();\n      this.loadingQueue = {\n        high: new Set(),\n        medium: new Set(),\n        low: new Set()\n      };\n      this.loadedComponents = new Set();\n      this.loadingComponents = new Set();\n      this.networkConditions = {\n        type: '4g',\n        effectiveType: '4g',\n        downlink: 10,\n        rtt: 50\n      };\n      \n      // Resource hints registry\n      this.resourceHints = new Map();\n      \n      // Initialize metrics\n      this.metrics = {\n        loadedComponentCount: 0,\n        preloadedComponentCount: 0,\n        usedPreloadedCount: 0,\n        networkSavings: 0\n      };\n    }\n    \n    /**\n     * Register a component with the loader\n     * @param {string} componentId - ID of the component\n     * @param {Object} componentData - Metadata about the component\n     */\n    registerComponent(componentId, componentData) {\n      // Store component metadata\n      this.registeredComponents.set(componentId, {\n        id: componentId,\n        module: componentData.module,\n        size: componentData.size || 0,\n        dependencies: componentData.dependencies || [],\n        importance: componentData.importance || 'normal',\n        priority: 'medium',\n        ...componentData\n      });\n    }\n    \n    /**\n     * Update loading priorities based on predictions\n     * @param {Array} predictions - Component predictions with probabilities\n     */\n    updateLoadingPriorities(predictions) {\n      // Reset queues\n      this.loadingQueue.high.clear();\n      this.loadingQueue.medium.clear();\n      this.loadingQueue.low.clear();\n      \n      // Update component priorities based on predictions\n      predictions.forEach(prediction => {\n        const { componentId, priority } = prediction;\n        \n        // Skip already loaded components\n        if (this.loadedComponents.has(componentId) || this.loadingComponents.has(componentId)) {\n          return;\n        }\n        \n        // Update component priority\n        const component = this.registeredComponents.get(componentId);\n        if (component) {\n          component.priority = priority;\n          this.loadingQueue[priority].add(componentId);\n        }\n      });\n      \n      // Process loading queue based on current conditions\n      this.processLoadingQueue();\n    }\n    \n    /**\n     * Process the loading queue, taking into account system conditions\n     */\n    processLoadingQueue() {\n      // Determine how many components to preload based on network conditions\n      const batchSize = this.calculateBatchSize();\n      let remainingSlots = batchSize;\n      \n      // Process queue by priority\n      for (const priority of ['high', 'medium', 'low']) {\n        if (remainingSlots <= 0) break;\n        \n        // Get up to remainingSlots components from this priority queue\n        const componentsToLoad = Array.from(this.loadingQueue[priority]).slice(0, remainingSlots);\n        \n        for (const componentId of componentsToLoad) {\n          this.loadComponent(componentId, priority);\n          remainingSlots--;\n        }\n      }\n    }\n    \n    /**\n     * Calculate appropriate batch size based on network conditions\n     * @returns {number} - Number of components to preload at once\n     */\n    calculateBatchSize() {\n      if (!this.options.networkAdaptation) {\n        return this.options.preloadBatchSize;\n      }\n      \n      // Adjust batch size based on network quality\n      const { effectiveType, downlink } = this.networkConditions;\n      \n      // Base size on network type\n      switch (effectiveType) {\n        case '4g':\n          return this.options.preloadBatchSize;\n        case '3g':\n          return Math.max(1, Math.floor(this.options.preloadBatchSize * 0.7));\n        case '2g':\n        case 'slow-2g':\n          return 1;\n        default:\n          return this.options.preloadBatchSize;\n      }\n    }\n    \n    /**\n     * Load a component with specified priority\n     * @param {string} componentId - ID of the component to load\n     * @param {string} priority - Priority level (high, medium, low)\n     */\n    loadComponent(componentId, priority = 'medium') {\n      // Skip if already loaded or loading\n      if (this.loadedComponents.has(componentId) || this.loadingComponents.has(componentId)) {\n        return;\n      }\n      \n      const component = this.registeredComponents.get(componentId);\n      if (!component) {\n        console.warn(`ReactSmart: Attempted to load unknown component: ${componentId}`);\n        return;\n      }\n      \n      // Mark as loading\n      this.loadingComponents.add(componentId);\n      \n      // Determine loading method based on priority\n      if (priority === 'high') {\n        this.preloadResource(componentId);\n      } else if (priority === 'medium') {\n        this.preconnectResource(componentId);\n      }\n      \n      // In a real implementation, this would actually load the component\n      // using dynamic imports or a similar mechanism\n      \n      // Simulate loading with timeout based on component size and network\n      const loadTime = this.calculateLoadTime(component.size || 10);\n      \n      setTimeout(() => {\n        // Mark as loaded\n        this.loadedComponents.add(componentId);\n        this.loadingComponents.delete(componentId);\n        \n        // Remove from loading queues\n        this.loadingQueue.high.delete(componentId);\n        this.loadingQueue.medium.delete(componentId);\n        this.loadingQueue.low.delete(componentId);\n        \n        // Update metrics\n        this.metrics.loadedComponentCount++;\n        if (priority === 'high') {\n          this.metrics.preloadedComponentCount++;\n        }\n        \n        // Load dependencies if needed\n        this.loadDependencies(component);\n        \n        // Remove resource hints\n        this.cleanupResourceHints(componentId);\n        \n        console.debug(`ReactSmart: Loaded component ${componentId} with ${priority} priority`);\n      }, loadTime);\n    }\n    \n    /**\n     * Load dependencies for a component\n     * @param {Object} component - Component object\n     */\n    loadDependencies(component) {\n      if (!component.dependencies || component.dependencies.length === 0) {\n        return;\n      }\n      \n      // Load each dependency with medium priority\n      component.dependencies.forEach(dependencyId => {\n        if (!this.loadedComponents.has(dependencyId) && !this.loadingComponents.has(dependencyId)) {\n          this.loadComponent(dependencyId, 'medium');\n        }\n      });\n    }\n    \n    /**\n     * Calculate estimated load time based on component size and network conditions\n     * @param {number} sizeKB - Size of component in KB\n     * @returns {number} - Estimated load time in ms\n     */\n    calculateLoadTime(sizeKB) {\n      if (!this.options.networkAdaptation) {\n        return 100; // Default load time\n      }\n      \n      const { downlink, rtt } = this.networkConditions;\n      \n      // Basic formula: latency + (size / bandwidth)\n      // Convert KB to bits (× 8 × 1024), and Mbps to bps (× 1024 × 1024)\n      const latency = rtt || 100;\n      const bandwidth = downlink || 1; // Mbps\n      \n      const transferTime = (sizeKB * 8 * 1024) / (bandwidth * 1024 * 1024) * 1000;\n      return latency + transferTime;\n    }\n    \n    /**\n     * Add a preload hint for a high-priority component\n     * @param {string} componentId - ID of the component\n     */\n    preloadResource(componentId) {\n      const component = this.registeredComponents.get(componentId);\n      if (!component || !component.module) return;\n      \n      // Create and add preload link\n      const preloadLink = document.createElement('link');\n      preloadLink.rel = 'preload';\n      preloadLink.as = 'script';\n      preloadLink.href = this.getResourceUrl(component);\n      \n      document.head.appendChild(preloadLink);\n      \n      // Register for cleanup\n      this.resourceHints.set(componentId, preloadLink);\n    }\n    \n    /**\n     * Add a preconnect hint for a medium-priority component\n     * @param {string} componentId - ID of the component\n     */\n    preconnectResource(componentId) {\n      const component = this.registeredComponents.get(componentId);\n      if (!component || !component.module) return;\n      \n      // Extract domain from module path\n      const domain = this.extractDomain(component);\n      if (!domain) return;\n      \n      // Create and add preconnect link\n      const preconnectLink = document.createElement('link');\n      preconnectLink.rel = 'preconnect';\n      preconnectLink.href = domain;\n      \n      document.head.appendChild(preconnectLink);\n      \n      // Register for cleanup\n      this.resourceHints.set(componentId, preconnectLink);\n    }\n    \n    /**\n     * Clean up resource hints for a component\n     * @param {string} componentId - ID of the component\n     */\n    cleanupResourceHints(componentId) {\n      const hint = this.resourceHints.get(componentId);\n      if (hint) {\n        // Remove from DOM\n        hint.parentNode.removeChild(hint);\n        // Remove from registry\n        this.resourceHints.delete(componentId);\n      }\n    }\n    \n    /**\n     * Extract domain from a component's module path\n     * @param {Object} component - Component object\n     * @returns {string|null} - Domain URL or null\n     */\n    extractDomain(component) {\n      try {\n        // This is a simplified implementation\n        // In practice, you would need to handle various module formats\n        if (component.module && typeof component.module === 'string' && component.module.startsWith('http')) {\n          const url = new URL(component.module);\n          return `${url.protocol}//${url.hostname}`;\n        }\n        return null;\n      } catch (error) {\n        return null;\n      }\n    }\n    \n    /**\n     * Get resource URL for a component\n     * @param {Object} component - Component object\n     * @returns {string} - Resource URL\n     */\n    getResourceUrl(component) {\n      // In a real implementation, this would generate the correct\n      // chunk URL based on the component and build configuration\n      return component.module || `/${component.id}.chunk.js`;\n    }\n    \n    /**\n     * Update network conditions\n     * @param {Object} conditions - Current network conditions\n     */\n    setNetworkConditions(conditions) {\n      this.networkConditions = conditions;\n      \n      // Re-process loading queue with new conditions\n      if (this.options.networkAdaptation) {\n        this.processLoadingQueue();\n      }\n    }\n    \n    /**\n     * Mark a component as used after it was preloaded\n     * @param {string} componentId - ID of the component\n     */\n    markComponentUsed(componentId) {\n      if (this.loadedComponents.has(componentId)) {\n        // Calculate network savings if we preloaded this component\n        const component = this.registeredComponents.get(componentId);\n        if (component && component.size) {\n          this.metrics.usedPreloadedCount++;\n          this.metrics.networkSavings += component.size;\n        }\n      }\n    }\n    \n    /**\n     * Get the current priority of a component\n     * @param {string} componentId - ID of the component\n     * @returns {string} - Priority level (high, medium, low)\n     */\n    getComponentPriority(componentId) {\n      const component = this.registeredComponents.get(componentId);\n      return component ? component.priority : 'medium';\n    }\n    \n    /**\n     * Check if a component is loaded\n     * @param {string} componentId - ID of the component\n     * @returns {boolean} - Whether the component is loaded\n     */\n    isComponentLoaded(componentId) {\n      return this.loadedComponents.has(componentId);\n    }\n    \n    /**\n     * Get all registered components\n     * @returns {Array} - List of registered components\n     */\n    getRegisteredComponents() {\n      return Array.from(this.registeredComponents.values());\n    }\n    \n    /**\n     * Get current loader metrics\n     * @returns {Object} - Current metrics\n     */\n    getMetrics() {\n      const hitRate = this.metrics.preloadedComponentCount > 0\n        ? this.metrics.usedPreloadedCount / this.metrics.preloadedComponentCount\n        : 0;\n      \n      return {\n        loadedComponentCount: this.metrics.loadedComponentCount,\n        preloadedComponentCount: this.metrics.preloadedComponentCount,\n        usedPreloadedCount: this.metrics.usedPreloadedCount,\n        preloadHitRate: hitRate,\n        networkSavingsKB: this.metrics.networkSavings,\n        currentQueueSizes: {\n          high: this.loadingQueue.high.size,\n          medium: this.loadingQueue.medium.size,\n          low: this.loadingQueue.low.size\n        }\n      };\n    }\n    \n    /**\n     * Reset the loader state\n     */\n    reset() {\n      this.loadingQueue.high.clear();\n      this.loadingQueue.medium.clear();\n      this.loadingQueue.low.clear();\n      this.loadedComponents.clear();\n      this.loadingComponents.clear();\n      \n      // Clean up all resource hints\n      this.resourceHints.forEach(hint => {\n        if (hint.parentNode) {\n          hint.parentNode.removeChild(hint);\n        }\n      });\n      this.resourceHints.clear();\n      \n      // Reset metrics\n      this.metrics = {\n        loadedComponentCount: 0,\n        preloadedComponentCount: 0,\n        usedPreloadedCount: 0,\n        networkSavings: 0\n      };\n    }\n  }\n  \n  export default DynamicComponentLoader;","/**\n * Network Utilities\n * \n * Utilities for detecting and monitoring network conditions\n * to optimize component loading strategies.\n */\n\n/**\n * Detect current network conditions\n * @returns {Object} Network condition information\n */\nexport const detectNetworkConditions = () => {\n    // Default network condition values\n    const defaultConditions = {\n      type: '4g',\n      effectiveType: '4g',\n      downlink: 10,\n      rtt: 50,\n      saveData: false,\n      online: true\n    };\n    \n    // Use Network Information API if available\n    if (navigator.connection) {\n      const connection = navigator.connection;\n      \n      return {\n        type: connection.type || defaultConditions.type,\n        effectiveType: connection.effectiveType || defaultConditions.effectiveType,\n        downlink: connection.downlink || defaultConditions.downlink,\n        rtt: connection.rtt || defaultConditions.rtt,\n        saveData: connection.saveData || defaultConditions.saveData,\n        online: navigator.onLine\n      };\n    }\n    \n    // If Network Information API is not available, estimate based on\n    // navigator.onLine and potentially performance.timing metrics\n    return {\n      ...defaultConditions,\n      online: navigator.onLine\n    };\n  };\n  \n  /**\n   * Set up ongoing network monitoring\n   * @param {Function} callback - Function to call when network conditions change\n   * @returns {Function} Cleanup function to remove listeners\n   */\n  export const monitorNetworkConditions = (callback) => {\n    if (!callback || typeof callback !== 'function') {\n      throw new Error('monitorNetworkConditions requires a callback function');\n    }\n    \n    // Function to handle network changes\n    const handleNetworkChange = () => {\n      const conditions = detectNetworkConditions();\n      callback(conditions);\n    };\n    \n    // Set up Network Information API listeners if available\n    if (navigator.connection) {\n      navigator.connection.addEventListener('change', handleNetworkChange);\n    }\n    \n    // Set up online/offline listeners\n    window.addEventListener('online', handleNetworkChange);\n    window.addEventListener('offline', handleNetworkChange);\n    \n    // Return cleanup function\n    return () => {\n      if (navigator.connection) {\n        navigator.connection.removeEventListener('change', handleNetworkChange);\n      }\n      \n      window.removeEventListener('online', handleNetworkChange);\n      window.removeEventListener('offline', handleNetworkChange);\n    };\n  };\n  \n  /**\n   * Categorize network quality based on conditions\n   * @param {Object} conditions - Network conditions\n   * @returns {string} Network quality category ('excellent', 'good', 'fair', 'poor', 'offline')\n   */\n  export const categorizeNetworkQuality = (conditions) => {\n    if (!conditions) {\n      conditions = detectNetworkConditions();\n    }\n    \n    const { effectiveType, downlink, rtt, online } = conditions;\n    \n    // Check if offline\n    if (!online) {\n      return 'offline';\n    }\n    \n    // Categorize based on effective connection type if available\n    if (effectiveType) {\n      switch (effectiveType) {\n        case '4g':\n          return 'excellent';\n        case '3g':\n          return 'good';\n        case '2g':\n          return 'fair';\n        case 'slow-2g':\n          return 'poor';\n        default:\n          // If unknown, use downlink and RTT\n          break;\n      }\n    }\n    \n    // Categorize based on downlink and RTT\n    if (downlink && rtt) {\n      if (downlink >= 5 && rtt < 100) {\n        return 'excellent';\n      } else if (downlink >= 2 && rtt < 200) {\n        return 'good';\n      } else if (downlink >= 0.5 && rtt < 400) {\n        return 'fair';\n      } else {\n        return 'poor';\n      }\n    }\n    \n    // Fallback: categorize based on downlink only\n    if (downlink) {\n      if (downlink >= 5) return 'excellent';\n      if (downlink >= 2) return 'good';\n      if (downlink >= 0.5) return 'fair';\n      return 'poor';\n    }\n    \n    // Fallback: categorize based on RTT only\n    if (rtt) {\n      if (rtt < 100) return 'excellent';\n      if (rtt < 200) return 'good';\n      if (rtt < 400) return 'fair';\n      return 'poor';\n    }\n    \n    // If we can't determine, assume 'good'\n    return 'good';\n  };\n  \n  /**\n   * Calculate appropriate batch size for component loading based on network quality\n   * @param {string} networkQuality - Network quality category\n   * @param {number} baseBatchSize - Base number of components to load at once\n   * @returns {number} Adjusted batch size\n   */\n  export const calculateBatchSize = (networkQuality, baseBatchSize = 3) => {\n    switch (networkQuality) {\n      case 'excellent':\n        return baseBatchSize;\n      case 'good':\n        return Math.max(1, Math.floor(baseBatchSize * 0.7));\n      case 'fair':\n        return Math.max(1, Math.floor(baseBatchSize * 0.5));\n      case 'poor':\n        return 1;\n      case 'offline':\n        return 0;\n      default:\n        return baseBatchSize;\n    }\n  };\n  \n  /**\n   * Estimate load time for a resource based on size and network conditions\n   * @param {number} sizeKB - Size of the resource in KB\n   * @param {Object} networkConditions - Current network conditions\n   * @returns {number} Estimated load time in milliseconds\n   */\n  export const estimateLoadTime = (sizeKB, networkConditions) => {\n    if (!networkConditions) {\n      networkConditions = detectNetworkConditions();\n    }\n    \n    const { downlink, rtt } = networkConditions;\n    \n    // Base latency on RTT\n    const latency = rtt || 100; // default to 100ms if RTT is unknown\n    \n    // Base bandwidth on downlink\n    const bandwidth = downlink || 1; // default to 1Mbps if downlink is unknown\n    \n    // Calculate transfer time: size (in bits) / bandwidth (in bits per second)\n    // Convert KB to bits (× 8 × 1024), and Mbps to bps (× 1024 × 1024)\n    const transferTime = (sizeKB * 8 * 1024) / (bandwidth * 1024 * 1024) * 1000;\n    \n    // Total load time = latency + transfer time\n    return latency + transferTime;\n  };\n  \n  /**\n   * Prioritize resources based on network conditions\n   * @param {Object} resources - Resources to prioritize, with sizes in KB\n   * @param {Object} networkConditions - Current network conditions\n   * @returns {Object} Resources categorized by priority\n   */\n  export const prioritizeResources = (resources, networkConditions) => {\n    if (!networkConditions) {\n      networkConditions = detectNetworkConditions();\n    }\n    \n    const networkQuality = categorizeNetworkQuality(networkConditions);\n    \n    // Prioritization thresholds based on network quality\n    let sizeThresholds;\n    \n    switch (networkQuality) {\n      case 'excellent':\n        sizeThresholds = { high: 200, medium: 500 }; // in KB\n        break;\n      case 'good':\n        sizeThresholds = { high: 100, medium: 300 };\n        break;\n      case 'fair':\n        sizeThresholds = { high: 50, medium: 150 };\n        break;\n      case 'poor':\n        sizeThresholds = { high: 20, medium: 50 };\n        break;\n      case 'offline':\n        // When offline, only prioritize resources that might be in cache\n        sizeThresholds = { high: 0, medium: 0 };\n        break;\n      default:\n        sizeThresholds = { high: 100, medium: 300 };\n    }\n    \n    // Categorize resources by priority\n    const prioritized = {\n      high: {},\n      medium: {},\n      low: {}\n    };\n    \n    Object.entries(resources).forEach(([id, resource]) => {\n      const size = resource.size || 0;\n      \n      if (size <= sizeThresholds.high) {\n        prioritized.high[id] = resource;\n      } else if (size <= sizeThresholds.medium) {\n        prioritized.medium[id] = resource;\n      } else {\n        prioritized.low[id] = resource;\n      }\n    });\n    \n    return prioritized;\n  };\n  \n  /**\n   * Create a resource hint (preload, prefetch, preconnect) for a resource\n   * @param {string} type - Type of hint ('preload', 'prefetch', 'preconnect')\n   * @param {string} url - URL of the resource\n   * @param {string} as - Resource type (for preload and prefetch)\n   * @returns {HTMLElement} Created link element\n   */\n  export const createResourceHint = (type, url, as) => {\n    if (!type || !url) {\n      throw new Error('createResourceHint requires type and url parameters');\n    }\n    \n    // Validate hint type\n    if (!['preload', 'prefetch', 'preconnect', 'dns-prefetch'].includes(type)) {\n      throw new Error(`Invalid resource hint type: ${type}`);\n    }\n    \n    // Create link element\n    const link = document.createElement('link');\n    link.rel = type;\n    link.href = url;\n    \n    // Add 'as' attribute for preload and prefetch\n    if (['preload', 'prefetch'].includes(type) && as) {\n      link.as = as;\n    }\n    \n    // Add to document head\n    document.head.appendChild(link);\n    \n    return link;\n  };\n  \n  /**\n   * Extract domain from a URL\n   * @param {string} url - URL to extract domain from\n   * @returns {string|null} Domain URL or null if invalid\n   */\n  export const extractDomain = (url) => {\n    try {\n      if (typeof url === 'string' && (url.startsWith('http') || url.startsWith('//'))) {\n        const parsedUrl = new URL(url.startsWith('//') ? `https:${url}` : url);\n        return `${parsedUrl.protocol}//${parsedUrl.hostname}`;\n      }\n      return null;\n    } catch (error) {\n      return null;\n    }\n  };\n  \n  /**\n   * Measure and track network performance for a resource load\n   * @param {string} resourceUrl - URL of the resource to measure\n   * @param {Function} callback - Callback function with performance data\n   */\n  export const measureResourceLoad = (resourceUrl, callback) => {\n    if (!resourceUrl) {\n      throw new Error('measureResourceLoad requires a resourceUrl parameter');\n    }\n    \n    if (!callback || typeof callback !== 'function') {\n      throw new Error('measureResourceLoad requires a callback function');\n    }\n    \n    // Create a new performance observer\n    if (window.PerformanceObserver) {\n      const observer = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        \n        // Find matching resource\n        const resourceEntry = entries.find(entry => \n          entry.name.includes(resourceUrl) && entry.entryType === 'resource'\n        );\n        \n        if (resourceEntry) {\n          // Calculate performance metrics\n          const metrics = {\n            duration: resourceEntry.duration,\n            transferSize: resourceEntry.transferSize,\n            encodedBodySize: resourceEntry.encodedBodySize,\n            decodedBodySize: resourceEntry.decodedBodySize,\n            startTime: resourceEntry.startTime,\n            // Calculate bandwidth in Mbps\n            bandwidth: resourceEntry.transferSize > 0 \n              ? (resourceEntry.transferSize * 8 / 1024 / 1024) / (resourceEntry.duration / 1000)\n              : 0\n          };\n          \n          // Call callback with metrics\n          callback(metrics);\n          \n          // Disconnect observer\n          observer.disconnect();\n        }\n      });\n      \n      // Start observing resource timing entries\n      observer.observe({ entryTypes: ['resource'] });\n    } else {\n      // Fallback if PerformanceObserver is not available\n      console.warn('PerformanceObserver not supported, cannot measure resource load');\n      callback(null);\n    }\n  };\n  \n  export default {\n    detectNetworkConditions,\n    monitorNetworkConditions,\n    categorizeNetworkQuality,\n    calculateBatchSize,\n    estimateLoadTime,\n    prioritizeResources,\n    createResourceHint,\n    extractDomain,\n    measureResourceLoad\n  };","/**\n * Storage Utilities\n * \n * Utilities for managing persistent storage of user interaction data,\n * prediction models, and component metrics in a privacy-conscious way.\n */\n\n// Constants\nconst STORAGE_KEYS = {\n    INTERACTION_DATA: 'reactsmart_interactions',\n    COMPONENT_USAGE: 'reactsmart_component_usage',\n    PREDICTION_MODEL: 'reactsmart_prediction_model',\n    USER_PREFERENCES: 'reactsmart_user_prefs',\n    SESSION_ID: 'reactsmart_session_id',\n    LAST_CLEANUP: 'reactsmart_last_cleanup'\n  };\n  \n  const DEFAULT_EXPIRY = 30; // days\n  \n  /**\n   * Initialize storage for ReactSmart\n   * Ensures required storage structures exist\n   */\n  export const initializeStorage = () => {\n    try {\n      // Check if localStorage is available\n      if (!isLocalStorageAvailable()) {\n        console.warn('ReactSmart: localStorage is not available, using in-memory storage');\n        window._reactSmartMemoryStorage = window._reactSmartMemoryStorage || {};\n        return false;\n      }\n      \n      // Initialize interaction data if it doesn't exist\n      if (!localStorage.getItem(STORAGE_KEYS.INTERACTION_DATA)) {\n        localStorage.setItem(STORAGE_KEYS.INTERACTION_DATA, JSON.stringify([]));\n      }\n      \n      // Initialize component usage data if it doesn't exist\n      if (!localStorage.getItem(STORAGE_KEYS.COMPONENT_USAGE)) {\n        localStorage.setItem(STORAGE_KEYS.COMPONENT_USAGE, JSON.stringify({}));\n      }\n      \n      // Initialize session ID if it doesn't exist\n      if (!localStorage.getItem(STORAGE_KEYS.SESSION_ID)) {\n        const sessionId = generateSessionId();\n        localStorage.setItem(STORAGE_KEYS.SESSION_ID, sessionId);\n      }\n      \n      // Record last cleanup time if it doesn't exist\n      if (!localStorage.getItem(STORAGE_KEYS.LAST_CLEANUP)) {\n        localStorage.setItem(STORAGE_KEYS.LAST_CLEANUP, Date.now().toString());\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('ReactSmart: Error initializing storage', error);\n      return false;\n    }\n  };\n  \n  /**\n   * Check if localStorage is available\n   * @returns {boolean} Whether localStorage is available\n   */\n  export const isLocalStorageAvailable = () => {\n    try {\n      const testKey = 'reactsmart_test';\n      localStorage.setItem(testKey, 'test');\n      localStorage.removeItem(testKey);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n  \n  /**\n   * Generate a unique session ID\n   * @returns {string} Unique session ID\n   */\n  export const generateSessionId = () => {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  };\n  \n  /**\n   * Get current session ID\n   * @returns {string} Current session ID\n   */\n  export const getSessionId = () => {\n    if (isLocalStorageAvailable()) {\n      return localStorage.getItem(STORAGE_KEYS.SESSION_ID) || generateSessionId();\n    } else {\n      return window._reactSmartMemoryStorage?.sessionId || generateSessionId();\n    }\n  };\n  \n  /**\n   * Store interaction data\n   * @param {Object} interaction - Interaction data to store\n   */\n  export const storeInteraction = (interaction) => {\n    try {\n      if (!interaction) return;\n      \n      // Add timestamp and session ID if not present\n      const enhancedInteraction = {\n        ...interaction,\n        timestamp: interaction.timestamp || Date.now(),\n        sessionId: getSessionId()\n      };\n      \n      if (isLocalStorageAvailable()) {\n        // Get existing interactions\n        const interactionsJson = localStorage.getItem(STORAGE_KEYS.INTERACTION_DATA);\n        const interactions = interactionsJson ? JSON.parse(interactionsJson) : [];\n        \n        // Add new interaction\n        interactions.push(enhancedInteraction);\n        \n        // Store limited number of interactions (last 100)\n        const limitedInteractions = interactions.slice(-100);\n        \n        // Save back to localStorage\n        localStorage.setItem(STORAGE_KEYS.INTERACTION_DATA, JSON.stringify(limitedInteractions));\n      } else {\n        // In-memory storage fallback\n        window._reactSmartMemoryStorage = window._reactSmartMemoryStorage || {};\n        window._reactSmartMemoryStorage.interactions = window._reactSmartMemoryStorage.interactions || [];\n        window._reactSmartMemoryStorage.interactions.push(enhancedInteraction);\n        \n        // Keep only the last 100 interactions\n        if (window._reactSmartMemoryStorage.interactions.length > 100) {\n          window._reactSmartMemoryStorage.interactions = window._reactSmartMemoryStorage.interactions.slice(-100);\n        }\n      }\n    } catch (error) {\n      console.error('ReactSmart: Error storing interaction data', error);\n    }\n  };\n  \n  /**\n   * Get stored interaction data\n   * @param {number} limit - Maximum number of interactions to return\n   * @returns {Array} Stored interaction data\n   */\n  export const getInteractions = (limit = 100) => {\n    try {\n      if (isLocalStorageAvailable()) {\n        const interactionsJson = localStorage.getItem(STORAGE_KEYS.INTERACTION_DATA);\n        const interactions = interactionsJson ? JSON.parse(interactionsJson) : [];\n        return interactions.slice(-limit);\n      } else {\n        return (window._reactSmartMemoryStorage?.interactions || []).slice(-limit);\n      }\n    } catch (error) {\n      console.error('ReactSmart: Error retrieving interaction data', error);\n      return [];\n    }\n  };\n  \n  /**\n   * Update component usage data\n   * @param {string} componentId - ID of the component\n   * @param {Object} usageData - Usage data to store\n   */\n  export const updateComponentUsage = (componentId, usageData) => {\n    try {\n      if (!componentId) return;\n      \n      // Prepare usage data with timestamp\n      const enhancedUsageData = {\n        ...usageData,\n        lastUsed: Date.now(),\n        sessionId: getSessionId()\n      };\n      \n      if (isLocalStorageAvailable()) {\n        // Get existing usage data\n        const usageJson = localStorage.getItem(STORAGE_KEYS.COMPONENT_USAGE);\n        const usage = usageJson ? JSON.parse(usageJson) : {};\n        \n        // Update or initialize component usage\n        if (usage[componentId]) {\n          // Update existing data\n          usage[componentId] = {\n            ...usage[componentId],\n            ...enhancedUsageData,\n            useCount: (usage[componentId].useCount || 0) + 1\n          };\n        } else {\n          // Initialize component data\n          usage[componentId] = {\n            ...enhancedUsageData,\n            useCount: 1,\n            firstUsed: Date.now()\n          };\n        }\n        \n        // Save back to localStorage\n        localStorage.setItem(STORAGE_KEYS.COMPONENT_USAGE, JSON.stringify(usage));\n      } else {\n        // In-memory storage fallback\n        window._reactSmartMemoryStorage = window._reactSmartMemoryStorage || {};\n        window._reactSmartMemoryStorage.componentUsage = window._reactSmartMemoryStorage.componentUsage || {};\n        \n        if (window._reactSmartMemoryStorage.componentUsage[componentId]) {\n          window._reactSmartMemoryStorage.componentUsage[componentId] = {\n            ...window._reactSmartMemoryStorage.componentUsage[componentId],\n            ...enhancedUsageData,\n            useCount: (window._reactSmartMemoryStorage.componentUsage[componentId].useCount || 0) + 1\n          };\n        } else {\n          window._reactSmartMemoryStorage.componentUsage[componentId] = {\n            ...enhancedUsageData,\n            useCount: 1,\n            firstUsed: Date.now()\n          };\n        }\n      }\n    } catch (error) {\n      console.error('ReactSmart: Error updating component usage data', error);\n    }\n  };\n  \n  /**\n   * Get component usage data for a specific component or all components\n   * @param {string} componentId - Optional ID of specific component\n   * @returns {Object} Component usage data\n   */\n  export const getComponentUsage = (componentId) => {\n    try {\n      let usageData;\n      \n      if (isLocalStorageAvailable()) {\n        const usageJson = localStorage.getItem(STORAGE_KEYS.COMPONENT_USAGE);\n        usageData = usageJson ? JSON.parse(usageJson) : {};\n      } else {\n        usageData = window._reactSmartMemoryStorage?.componentUsage || {};\n      }\n      \n      // Return specific component data if requested\n      if (componentId) {\n        return usageData[componentId] || null;\n      }\n      \n      // Otherwise return all usage data\n      return usageData;\n    } catch (error) {\n      console.error('ReactSmart: Error retrieving component usage data', error);\n      return componentId ? null : {};\n    }\n  };\n  \n  /**\n   * Store prediction model data\n   * @param {Object} modelData - Model data to store\n   */\n  export const storePredictionModel = (modelData) => {\n    try {\n      if (!modelData) return;\n      \n      // Add metadata\n      const enhancedModelData = {\n        ...modelData,\n        updated: Date.now(),\n        version: modelData.version || 1\n      };\n      \n      if (isLocalStorageAvailable()) {\n        localStorage.setItem(STORAGE_KEYS.PREDICTION_MODEL, JSON.stringify(enhancedModelData));\n      } else {\n        window._reactSmartMemoryStorage = window._reactSmartMemoryStorage || {};\n        window._reactSmartMemoryStorage.predictionModel = enhancedModelData;\n      }\n    } catch (error) {\n      console.error('ReactSmart: Error storing prediction model', error);\n    }\n  };\n  \n  /**\n   * Get stored prediction model\n   * @returns {Object|null} Stored prediction model or null\n   */\n  export const getPredictionModel = () => {\n    try {\n      if (isLocalStorageAvailable()) {\n        const modelJson = localStorage.getItem(STORAGE_KEYS.PREDICTION_MODEL);\n        return modelJson ? JSON.parse(modelJson) : null;\n      } else {\n        return window._reactSmartMemoryStorage?.predictionModel || null;\n      }\n    } catch (error) {\n      console.error('ReactSmart: Error retrieving prediction model', error);\n      return null;\n    }\n  };\n  \n  /**\n   * Store user preferences\n   * @param {Object} preferences - User preferences to store\n   */\n  export const storeUserPreferences = (preferences) => {\n    try {\n      if (!preferences) return;\n      \n      if (isLocalStorageAvailable()) {\n        // Get existing preferences\n        const prefsJson = localStorage.getItem(STORAGE_KEYS.USER_PREFERENCES);\n        const existingPrefs = prefsJson ? JSON.parse(prefsJson) : {};\n        \n        // Merge with new preferences\n        const updatedPrefs = {\n          ...existingPrefs,\n          ...preferences,\n          updated: Date.now()\n        };\n        \n        localStorage.setItem(STORAGE_KEYS.USER_PREFERENCES, JSON.stringify(updatedPrefs));\n      } else {\n        window._reactSmartMemoryStorage = window._reactSmartMemoryStorage || {};\n        window._reactSmartMemoryStorage.userPreferences = {\n          ...(window._reactSmartMemoryStorage.userPreferences || {}),\n          ...preferences,\n          updated: Date.now()\n        };\n      }\n    } catch (error) {\n      console.error('ReactSmart: Error storing user preferences', error);\n    }\n  };\n  \n  /**\n   * Get stored user preferences\n   * @returns {Object} User preferences\n   */\n  export const getUserPreferences = () => {\n    try {\n      if (isLocalStorageAvailable()) {\n        const prefsJson = localStorage.getItem(STORAGE_KEYS.USER_PREFERENCES);\n        return prefsJson ? JSON.parse(prefsJson) : {};\n      } else {\n        return window._reactSmartMemoryStorage?.userPreferences || {};\n      }\n    } catch (error) {\n      console.error('ReactSmart: Error retrieving user preferences', error);\n      return {};\n    }\n  };\n  \n  /**\n   * Clean up old data based on retention policy\n   * @param {number} retentionDays - Number of days to retain data\n   */\n  export const cleanupOldData = (retentionDays = DEFAULT_EXPIRY) => {\n    try {\n      // Check if we need to run cleanup\n      // (Only run once per day to avoid unnecessary processing)\n      const now = Date.now();\n      let lastCleanup = 0;\n      \n      if (isLocalStorageAvailable()) {\n        lastCleanup = parseInt(localStorage.getItem(STORAGE_KEYS.LAST_CLEANUP) || '0', 10);\n      } else {\n        lastCleanup = window._reactSmartMemoryStorage?.lastCleanup || 0;\n      }\n      \n      const daysSinceLastCleanup = (now - lastCleanup) / (1000 * 60 * 60 * 24);\n      \n      // Skip if cleaned up in the last day\n      if (daysSinceLastCleanup < 1) {\n        return;\n      }\n      \n      // Calculate retention threshold\n      const retentionThreshold = now - (retentionDays * 24 * 60 * 60 * 1000);\n      \n      if (isLocalStorageAvailable()) {\n        // Clean up interaction data\n        const interactionsJson = localStorage.getItem(STORAGE_KEYS.INTERACTION_DATA);\n        if (interactionsJson) {\n          const interactions = JSON.parse(interactionsJson);\n          const filteredInteractions = interactions.filter(\n            interaction => (interaction.timestamp || 0) >= retentionThreshold\n          );\n          localStorage.setItem(STORAGE_KEYS.INTERACTION_DATA, JSON.stringify(filteredInteractions));\n        }\n        \n        // Clean up component usage data\n        const usageJson = localStorage.getItem(STORAGE_KEYS.COMPONENT_USAGE);\n        if (usageJson) {\n          const usage = JSON.parse(usageJson);\n          Object.keys(usage).forEach(componentId => {\n            // Remove components not used since threshold\n            if ((usage[componentId].lastUsed || 0) < retentionThreshold) {\n              delete usage[componentId];\n            }\n          });\n          localStorage.setItem(STORAGE_KEYS.COMPONENT_USAGE, JSON.stringify(usage));\n        }\n        \n        // Update last cleanup time\n        localStorage.setItem(STORAGE_KEYS.LAST_CLEANUP, now.toString());\n      } else {\n        // Clean up in-memory storage\n        if (window._reactSmartMemoryStorage?.interactions) {\n          window._reactSmartMemoryStorage.interactions = window._reactSmartMemoryStorage.interactions.filter(\n            interaction => (interaction.timestamp || 0) >= retentionThreshold\n          );\n        }\n        \n        if (window._reactSmartMemoryStorage?.componentUsage) {\n          Object.keys(window._reactSmartMemoryStorage.componentUsage).forEach(componentId => {\n            // Remove components not used since threshold\n            if ((window._reactSmartMemoryStorage.componentUsage[componentId].lastUsed || 0) < retentionThreshold) {\n              delete window._reactSmartMemoryStorage.componentUsage[componentId];\n            }\n          });\n        }\n        \n        // Update last cleanup time\n        window._reactSmartMemoryStorage.lastCleanup = now;\n      }\n    } catch (error) {\n      console.error('ReactSmart: Error cleaning up old data', error);\n    }\n  };\n  \n  /**\n   * Clear all ReactSmart storage data\n   */\n  export const clearAllData = () => {\n    try {\n      if (isLocalStorageAvailable()) {\n        // Clear all ReactSmart data from localStorage\n        Object.values(STORAGE_KEYS).forEach(key => {\n          localStorage.removeItem(key);\n        });\n      }\n      \n      // Clear in-memory storage\n      window._reactSmartMemoryStorage = {};\n      \n      // Re-initialize storage\n      initializeStorage();\n    } catch (error) {\n      console.error('ReactSmart: Error clearing data', error);\n    }\n  };\n  \n  /**\n   * Get estimated storage size in KB\n   * @returns {number} Estimated storage size in KB\n   */\n  export const getStorageSize = () => {\n    try {\n      let totalSize = 0;\n      \n      if (isLocalStorageAvailable()) {\n        Object.values(STORAGE_KEYS).forEach(key => {\n          const value = localStorage.getItem(key);\n          if (value) {\n            totalSize += value.length;\n          }\n        });\n      } else if (window._reactSmartMemoryStorage) {\n        totalSize = JSON.stringify(window._reactSmartMemoryStorage).length;\n      }\n      \n      // Convert bytes to KB\n      return Math.round(totalSize / 1024);\n    } catch (error) {\n      console.error('ReactSmart: Error calculating storage size', error);\n      return 0;\n    }\n  };\n  \n  export default {\n    initializeStorage,\n    storeInteraction,\n    getInteractions,\n    updateComponentUsage,\n    getComponentUsage,\n    storePredictionModel,\n    getPredictionModel,\n    storeUserPreferences,\n    getUserPreferences,\n    cleanupOldData,\n    clearAllData,\n    getStorageSize,\n    getSessionId\n  };","/**\n * Privacy Utilities\n * \n * Utilities for handling user data in a privacy-preserving manner,\n * including anonymization, consent management, and compliance with\n * privacy regulations.\n */\n\n// Privacy compliance modes\nconst COMPLIANCE_MODES = {\n    GDPR: 'gdpr',   // European Union General Data Protection Regulation\n    CCPA: 'ccpa',   // California Consumer Privacy Act\n    LGPD: 'lgpd',   // Brazil's Lei Geral de Proteção de Dados\n    PIPEDA: 'pipeda', // Canada's Personal Information Protection and Electronic Documents Act\n    MINIMAL: 'minimal' // Most restrictive mode with minimal data collection\n  };\n  \n  // Default configuration\n  const DEFAULT_CONFIG = {\n    anonymizeIp: true,\n    minimizeData: true,\n    hashUserIds: true,\n    complianceMode: COMPLIANCE_MODES.GDPR,\n    retentionPeriodDays: 30,\n    storageQuotaKB: 100\n  };\n  \n  // Current privacy configuration\n  let privacyConfig = { ...DEFAULT_CONFIG };\n  \n  /**\n   * Configure privacy settings\n   * @param {Object} config - Privacy configuration options\n   */\n  export const configurePrivacy = (config = {}) => {\n    privacyConfig = {\n      ...privacyConfig,\n      ...config\n    };\n  };\n  \n  /**\n   * Get current privacy configuration\n   * @returns {Object} Current privacy configuration\n   */\n  export const getPrivacyConfig = () => {\n    return { ...privacyConfig };\n  };\n  \n  /**\n   * Anonymize user interaction data based on privacy settings\n   * @param {Object} interactionData - Raw interaction data\n   * @returns {Object} Anonymized interaction data\n   */\n  export const anonymizeInteractionData = (interactionData) => {\n    if (!interactionData) return {};\n    \n    // Create a copy of the data to avoid modifying the original\n    const anonymized = { ...interactionData };\n    \n    // Anonymize IP address if enabled\n    if (privacyConfig.anonymizeIp && anonymized.userIp) {\n      anonymized.userIp = anonymizeIp(anonymized.userIp);\n    }\n    \n    // Hash user IDs if enabled\n    if (privacyConfig.hashUserIds && anonymized.userId) {\n      anonymized.userId = hashIdentifier(anonymized.userId);\n    }\n    \n    // Minimize data if enabled\n    if (privacyConfig.minimizeData) {\n      // Remove unnecessary fields based on compliance mode\n      applyDataMinimization(anonymized);\n    }\n    \n    // Add privacy metadata\n    anonymized._privacy = {\n      anonymized: true,\n      complianceMode: privacyConfig.complianceMode,\n      processingTime: Date.now()\n    };\n    \n    return anonymized;\n  };\n  \n  /**\n   * Anonymize an IP address (keep only the network part)\n   * @param {string} ip - IP address to anonymize\n   * @returns {string} Anonymized IP address\n   */\n  export const anonymizeIp = (ip) => {\n    if (!ip) return null;\n    \n    try {\n      // IPv4 address\n      if (ip.includes('.')) {\n        // Keep only first 3 octets for IPv4, replace last octet with 0\n        const parts = ip.split('.');\n        if (parts.length === 4) {\n          return `${parts[0]}.${parts[1]}.${parts[2]}.0`;\n        }\n      }\n      // IPv6 address\n      else if (ip.includes(':')) {\n        // Keep only first 4 segments for IPv6, replace rest with zeroes\n        const parts = ip.split(':');\n        return parts.slice(0, 4).join(':') + '::0';\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error anonymizing IP address:', error);\n      return null;\n    }\n  };\n  \n  /**\n   * Hash an identifier (such as user ID) for anonymization\n   * @param {string} identifier - Identifier to hash\n   * @returns {string} Hashed identifier\n   */\n  export const hashIdentifier = (identifier) => {\n    if (!identifier) return null;\n    \n    try {\n      // Simple hash function (for a real implementation, use a cryptographic hash)\n      // This is a basic implementation of a non-reversible hash function\n      // In production, you would use a more secure method like SHA-256\n      \n      // Convert string to a numeric hash code\n      let hash = 0;\n      for (let i = 0; i < identifier.length; i++) {\n        const char = identifier.charCodeAt(i);\n        hash = ((hash << 5) - hash) + char;\n        hash = hash & hash; // Convert to 32bit integer\n      }\n      \n      // Convert to hex string and add prefix to indicate it's hashed\n      return 'h_' + (hash >>> 0).toString(16).padStart(8, '0');\n    } catch (error) {\n      console.error('Error hashing identifier:', error);\n      return 'h_unknown';\n    }\n  };\n  \n  /**\n   * Apply data minimization based on compliance mode\n   * @param {Object} data - Data to minimize\n   */\n  const applyDataMinimization = (data) => {\n    // Fields to remove for all compliance modes\n    const sensitiveFields = [\n      'password', 'ssn', 'socialSecurityNumber', 'creditCard', 'creditCardNumber',\n      'cvv', 'pin', 'passportNumber', 'driverLicense', 'healthData'\n    ];\n    \n    // Remove sensitive fields\n    sensitiveFields.forEach(field => {\n      if (field in data) {\n        delete data[field];\n      }\n    });\n    \n    // Apply compliance-specific data minimization\n    switch (privacyConfig.complianceMode) {\n      case COMPLIANCE_MODES.GDPR:\n        applyGdprMinimization(data);\n        break;\n      case COMPLIANCE_MODES.CCPA:\n        applyCcpaMinimization(data);\n        break;\n      case COMPLIANCE_MODES.MINIMAL:\n        applyMinimalDataCollection(data);\n        break;\n      // Other compliance modes handled similarly\n      default:\n        applyGdprMinimization(data); // Default to GDPR as it's generally strict\n    }\n  };\n  \n  /**\n   * Apply GDPR-specific data minimization\n   * @param {Object} data - Data to minimize\n   */\n  const applyGdprMinimization = (data) => {\n    // Fields to remove or anonymize under GDPR\n    const gdprSensitiveFields = [\n      'fullName', 'firstName', 'lastName', 'address', 'postCode', 'zipCode',\n      'phoneNumber', 'emailAddress', 'dateOfBirth', 'birthDate', 'age',\n      'gender', 'race', 'ethnicity', 'religion', 'politicalOpinion',\n      'preciseLocation', 'deviceId', 'advertisingId'\n    ];\n    \n    // Remove GDPR-sensitive fields\n    gdprSensitiveFields.forEach(field => {\n      if (field in data) {\n        delete data[field];\n      }\n    });\n    \n    // Generalize location data if present\n    if (data.location && typeof data.location === 'object') {\n      // Remove precise coordinates\n      if (data.location.coordinates) {\n        delete data.location.coordinates;\n      }\n      \n      // Keep only country and region, remove city and more specific info\n      if (data.location.city) {\n        delete data.location.city;\n      }\n      if (data.location.postalCode) {\n        delete data.location.postalCode;\n      }\n      if (data.location.street) {\n        delete data.location.street;\n      }\n    }\n  };\n  \n  /**\n   * Apply CCPA-specific data minimization\n   * @param {Object} data - Data to minimize\n   */\n  const applyCcpaMinimization = (data) => {\n    // Similar to GDPR but with CCPA-specific requirements\n    // For this implementation, we'll use the same approach as GDPR\n    // In a production system, you would implement CCPA-specific rules\n    applyGdprMinimization(data);\n  };\n  \n  /**\n   * Apply minimal data collection policy\n   * @param {Object} data - Data to minimize\n   */\n  const applyMinimalDataCollection = (data) => {\n    // Keep only essential data for functionality\n    const allowedFields = [\n      'timestamp', 'componentId', 'eventType', 'sessionId'\n    ];\n    \n    // Remove all fields except allowed ones\n    Object.keys(data).forEach(key => {\n      if (!allowedFields.includes(key) && !key.startsWith('_')) {\n        delete data[key];\n      }\n    });\n  };\n  \n  /**\n   * Check if user has given consent for data collection\n   * @returns {boolean} Whether user has given consent\n   */\n  export const hasUserConsent = () => {\n    try {\n      // Check localStorage for consent status\n      const consentData = localStorage.getItem('reactsmart_consent');\n      if (consentData) {\n        const { consented, expiry } = JSON.parse(consentData);\n        \n        // Check if consent is still valid (not expired)\n        if (consented && expiry && expiry > Date.now()) {\n          return true;\n        }\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Error checking user consent:', error);\n      return false;\n    }\n  };\n  \n  /**\n   * Set user consent status\n   * @param {boolean} consented - Whether user has consented\n   * @param {number} validityDays - Number of days consent is valid for\n   */\n  export const setUserConsent = (consented, validityDays = 365) => {\n    try {\n      // Calculate expiry date\n      const expiry = Date.now() + (validityDays * 24 * 60 * 60 * 1000);\n      \n      // Store consent status in localStorage\n      localStorage.setItem('reactsmart_consent', JSON.stringify({\n        consented,\n        timestamp: Date.now(),\n        expiry\n      }));\n      \n      return true;\n    } catch (error) {\n      console.error('Error setting user consent:', error);\n      return false;\n    }\n  };\n  \n  /**\n   * Generate a privacy policy for the current configuration\n   * @returns {Object} Privacy policy information\n   */\n  export const generatePrivacyPolicy = () => {\n    return {\n      dataCollected: getCollectedDataTypes(),\n      retentionPeriod: privacyConfig.retentionPeriodDays,\n      complianceMode: privacyConfig.complianceMode,\n      dataMinimization: privacyConfig.minimizeData,\n      anonymization: {\n        ipAddresses: privacyConfig.anonymizeIp,\n        userIds: privacyConfig.hashUserIds\n      },\n      dataSharing: {\n        thirdParties: false,\n        advertisers: false,\n        analytics: false\n      },\n      userRights: getUserRightsForComplianceMode(),\n      lastUpdated: new Date().toISOString()\n    };\n  };\n  \n  /**\n   * Get types of data collected based on current configuration\n   * @returns {Array} Types of data collected\n   */\n  const getCollectedDataTypes = () => {\n    const baseTypes = ['Component Usage', 'Interaction Timing'];\n    \n    if (privacyConfig.complianceMode === COMPLIANCE_MODES.MINIMAL) {\n      return baseTypes;\n    }\n    \n    const additionalTypes = ['Session Information', 'Network Conditions'];\n    \n    return [...baseTypes, ...additionalTypes];\n  };\n  \n  /**\n   * Get user rights information based on compliance mode\n   * @returns {Object} User rights information\n   */\n  const getUserRightsForComplianceMode = () => {\n    const baseRights = {\n      accessData: true,\n      deleteData: true\n    };\n    \n    switch (privacyConfig.complianceMode) {\n      case COMPLIANCE_MODES.GDPR:\n        return {\n          ...baseRights,\n          dataPortability: true,\n          restrictProcessing: true,\n          objectToProcessing: true,\n          automatedDecisionMaking: true\n        };\n      \n      case COMPLIANCE_MODES.CCPA:\n        return {\n          ...baseRights,\n          optOutOfSale: true,\n          nonDiscrimination: true\n        };\n      \n      case COMPLIANCE_MODES.MINIMAL:\n        return baseRights;\n      \n      default:\n        return baseRights;\n    }\n  };\n  \n  /**\n   * Create a data subject access report\n   * @param {string} sessionId - Optional session ID to filter by\n   * @returns {Object} Data access report\n   */\n  export const createDataAccessReport = (sessionId) => {\n    try {\n      // This would typically gather all data associated with the user\n      // For this implementation, we'll return a placeholder structure\n      \n      const storedData = {};\n      \n      // Get stored data from localStorage\n      const storageKeys = [\n        'reactsmart_interactions',\n        'reactsmart_component_usage',\n        'reactsmart_prediction_model',\n        'reactsmart_user_prefs'\n      ];\n      \n      storageKeys.forEach(key => {\n        try {\n          const data = localStorage.getItem(key);\n          if (data) {\n            storedData[key] = JSON.parse(data);\n          }\n        } catch (e) {\n          storedData[key] = { error: 'Could not parse data' };\n        }\n      });\n      \n      // Filter by session ID if provided\n      if (sessionId && storedData.reactsmart_interactions) {\n        storedData.reactsmart_interactions = storedData.reactsmart_interactions.filter(\n          interaction => interaction.sessionId === sessionId\n        );\n      }\n      \n      return {\n        generated: new Date().toISOString(),\n        userData: storedData,\n        privacySettings: getPrivacyConfig()\n      };\n    } catch (error) {\n      console.error('Error creating data access report:', error);\n      return {\n        error: 'Could not generate data access report',\n        errorDetails: error.message\n      };\n    }\n  };\n  \n  /**\n   * Delete all user data\n   * @param {string} sessionId - Optional session ID to delete data for\n   * @returns {boolean} Whether data was successfully deleted\n   */\n  export const deleteUserData = (sessionId) => {\n    try {\n      // If session ID provided, only delete data for that session\n      if (sessionId) {\n        // Delete interaction data for session\n        const interactionsKey = 'reactsmart_interactions';\n        const interactionsJson = localStorage.getItem(interactionsKey);\n        \n        if (interactionsJson) {\n          const interactions = JSON.parse(interactionsJson);\n          const filteredInteractions = interactions.filter(\n            interaction => interaction.sessionId !== sessionId\n          );\n          \n          localStorage.setItem(interactionsKey, JSON.stringify(filteredInteractions));\n        }\n        \n        // Other session-specific data could be handled similarly\n      } else {\n        // Delete all ReactSmart data\n        const storageKeys = [\n          'reactsmart_interactions',\n          'reactsmart_component_usage',\n          'reactsmart_prediction_model',\n          'reactsmart_user_prefs',\n          'reactsmart_session_id',\n          'reactsmart_last_cleanup'\n        ];\n        \n        storageKeys.forEach(key => {\n          localStorage.removeItem(key);\n        });\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error deleting user data:', error);\n      return false;\n    }\n  };\n  \n  /**\n   * Check if current data collection complies with specified regulations\n   * @returns {Object} Compliance status\n   */\n  export const checkCompliance = () => {\n    // This would typically perform a more thorough check\n    // For this implementation, we'll return a simple status\n    \n    const compliance = {\n      compliant: true,\n      issues: []\n    };\n    \n    // Check user consent\n    if (!hasUserConsent()) {\n      compliance.compliant = false;\n      compliance.issues.push({\n        severity: 'high',\n        issue: 'No valid user consent found',\n        recommendation: 'Implement consent management before collecting data'\n      });\n    }\n    \n    // Check data minimization\n    if (!privacyConfig.minimizeData) {\n      compliance.issues.push({\n        severity: 'medium',\n        issue: 'Data minimization is not enabled',\n        recommendation: 'Enable data minimization to comply with regulations'\n      });\n    }\n    \n    // Check IP anonymization\n    if (!privacyConfig.anonymizeIp) {\n      compliance.issues.push({\n        severity: 'medium',\n        issue: 'IP anonymization is not enabled',\n        recommendation: 'Enable IP anonymization to protect user privacy'\n      });\n    }\n    \n    return compliance;\n  };\n  \n  export default {\n    anonymizeInteractionData,\n    anonymizeIp,\n    hashIdentifier,\n    configurePrivacy,\n    getPrivacyConfig,\n    hasUserConsent,\n    setUserConsent,\n    generatePrivacyPolicy,\n    createDataAccessReport,\n    deleteUserData,\n    checkCompliance,\n    COMPLIANCE_MODES\n  };","import React, { createContext, useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport BehaviorAnalysis from '../core/BehaviorAnalysis';\nimport PredictionEngine from '../core/PredictionEngine';\nimport DynamicComponentLoader from '../core/DynamicComponentLoader';\nimport { detectNetworkConditions } from '../core/utils/networkUtils';\nimport { initializeStorage, cleanupOldData } from '../core/utils/storageUtils';\nimport { anonymizeInteractionData } from '../core/utils/privacyUtils';\n\n// Create context for ReactSmart\nexport const ReactSmartContext = createContext({\n  trackInteraction: () => {},\n  registerComponent: () => {},\n  preloadComponent: () => {},\n  getLoadingPriority: () => 'medium',\n  networkStatus: { type: '4g', effectiveType: '4g', downlink: 10, rtt: 50 },\n  isInitialized: false\n});\n\n/**\n * Main provider component that initializes ReactSmart and provides\n * context to child components.\n */\nconst ReactSmartProvider = ({ \n  children, \n  options = {\n    networkAdaptation: true,\n    learningRate: 0.03,\n    anonymizeData: true,\n    privacyCompliance: 'gdpr',\n    dataRetentionDays: 30,\n    disabled: false,\n    predictionModel: 'probabilistic',\n    debug: false,\n    logLevel: 'warn',\n    maxConcurrentLoads: 5,\n    maxCacheSize: 50,\n    compatibility: 'modern'\n  }\n}) => {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [networkStatus, setNetworkStatus] = useState({\n    type: '4g',\n    effectiveType: '4g',\n    downlink: 10,\n    rtt: 50,\n    saveData: false,\n    online: true\n  });\n  \n  // Create refs for core modules to preserve instances\n  const behaviorAnalysis = useRef(null);\n  const predictionEngine = useRef(null);\n  const componentLoader = useRef(null);\n  const predictionWorker = useRef(null);\n  \n  // Debugging logger\n  const logger = useRef({\n    debug: (...args) => options.debug && options.logLevel === 'debug' && console.debug('[ReactSmart]', ...args),\n    info: (...args) => options.debug && ['debug', 'info'].includes(options.logLevel) && console.info('[ReactSmart]', ...args),\n    warn: (...args) => options.debug && ['debug', 'info', 'warn'].includes(options.logLevel) && console.warn('[ReactSmart]', ...args),\n    error: (...args) => console.error('[ReactSmart]', ...args)\n  }).current;\n  \n  // Initialize ReactSmart on component mount\n  useEffect(() => {\n    if (options.disabled) {\n      logger.info('ReactSmart is disabled by configuration');\n      return;\n    }\n    \n    logger.info('Initializing ReactSmart with options:', options);\n    \n    // Initialize storage\n    initializeStorage();\n    \n    // Clean up old data according to retention policy\n    cleanupOldData(options.dataRetentionDays || 30);\n    \n    // Initialize core modules\n    behaviorAnalysis.current = new BehaviorAnalysis({\n      anonymizeData: options.anonymizeData,\n      privacyCompliance: options.privacyCompliance\n    });\n    \n    // Create prediction engine based on selected model\n    predictionEngine.current = new PredictionEngine({\n      learningRate: options.learningRate || 0.03,\n      modelType: options.predictionModel || 'probabilistic'\n    });\n    \n    componentLoader.current = new DynamicComponentLoader({\n      networkAdaptation: options.networkAdaptation,\n      preloadBatchSize: options.maxConcurrentLoads || 5,\n      maxCacheSize: options.maxCacheSize || 50\n    });\n    \n    // Initialize prediction worker if browser supports it and not in compatibility mode\n    if (window.Worker && options.compatibility !== 'legacy') {\n      try {\n        predictionWorker.current = new Worker(\n          new URL('../workers/prediction-worker.js', import.meta.url)\n        );\n        \n        predictionWorker.current.onmessage = function(e) {\n          const { type, predictions, error } = e.data;\n          \n          if (type === 'error') {\n            logger.error('Prediction worker error:', error);\n            return;\n          }\n          \n          if (type === 'predictions' && predictions) {\n            logger.debug('Received predictions from worker:', predictions.length);\n            componentLoader.current.updateLoadingPriorities(predictions);\n          }\n        };\n        \n        // Configure worker\n        predictionWorker.current.postMessage({\n          action: 'configure',\n          options: {\n            learningRate: options.learningRate,\n            modelType: options.predictionModel\n          }\n        });\n        \n        logger.info('Prediction worker initialized successfully');\n      } catch (error) {\n        logger.error('Failed to initialize prediction worker:', error);\n        logger.info('Falling back to main thread predictions');\n      }\n    } else {\n      logger.info(\n        window.Worker\n          ? 'Running in legacy compatibility mode, prediction will run on main thread'\n          : 'Web Workers not supported in this browser, prediction will run on main thread'\n      );\n    }\n    \n    // Monitor network conditions if enabled\n    if (options.networkAdaptation) {\n      const updateNetworkStatus = () => {\n        const conditions = detectNetworkConditions();\n        setNetworkStatus(conditions);\n        \n        if (componentLoader.current) {\n          componentLoader.current.setNetworkConditions(conditions);\n        }\n        \n        logger.debug('Network conditions updated:', conditions);\n      };\n      \n      // Initial check\n      updateNetworkStatus();\n      \n      // Set up network monitoring\n      if (navigator.connection) {\n        navigator.connection.addEventListener('change', updateNetworkStatus);\n        logger.debug('Network Information API available, monitoring network changes');\n      } else {\n        logger.debug('Network Information API not available, using fallback polling');\n      }\n      \n      // Periodic checking as fallback\n      const networkCheckInterval = setInterval(updateNetworkStatus, 30000);\n      \n      // Online/offline events\n      window.addEventListener('online', () => {\n        logger.info('Device went online');\n        updateNetworkStatus();\n      });\n      \n      window.addEventListener('offline', () => {\n        logger.info('Device went offline');\n        updateNetworkStatus();\n      });\n      \n      return () => {\n        if (navigator.connection) {\n          navigator.connection.removeEventListener('change', updateNetworkStatus);\n        }\n        clearInterval(networkCheckInterval);\n        window.removeEventListener('online', updateNetworkStatus);\n        window.removeEventListener('offline', updateNetworkStatus);\n      };\n    }\n    \n    // Make the instance available globally for debugging and metrics\n    if (options.debug) {\n      window.__REACTSMART_INSTANCE__ = {\n        behaviorAnalysis: behaviorAnalysis.current,\n        predictionEngine: predictionEngine.current,\n        componentLoader: componentLoader.current,\n        options,\n        version: '1.0.0'\n      };\n      logger.info('Debug mode enabled, instance available at window.__REACTSMART_INSTANCE__');\n    }\n    \n    setIsInitialized(true);\n    logger.info('ReactSmart initialized successfully');\n    \n    return () => {\n      // Clean up resources\n      if (predictionWorker.current) {\n        predictionWorker.current.terminate();\n        logger.debug('Terminated prediction worker');\n      }\n      \n      // Remove global debug reference\n      if (options.debug) {\n        delete window.__REACTSMART_INSTANCE__;\n      }\n      \n      logger.info('ReactSmart cleanup complete');\n    };\n  }, [\n    options.disabled, options.networkAdaptation, options.anonymizeData, \n    options.privacyCompliance, options.learningRate, options.dataRetentionDays,\n    options.predictionModel, options.debug, options.logLevel,\n    options.maxConcurrentLoads, options.maxCacheSize, options.compatibility,\n    logger\n  ]);\n  \n  /**\n   * Track user interaction with a component\n   * @param {string} componentId - ID of the component\n   * @param {object} interactionData - Data about the interaction\n   */\n  const trackInteraction = (componentId, interactionData) => {\n    if (!isInitialized || options.disabled) return;\n    \n    logger.debug('Tracking interaction:', componentId, interactionData.type);\n    \n    // Anonymize data if privacy settings require it\n    const processedData = options.anonymizeData \n      ? anonymizeInteractionData(interactionData)\n      : interactionData;\n    \n    // Add interaction to behavior analysis\n    const interaction = behaviorAnalysis.current.recordInteraction(componentId, processedData);\n    \n    // Send data to prediction worker if available\n    if (predictionWorker.current) {\n      const userPatterns = behaviorAnalysis.current.getCurrentPatterns();\n      predictionWorker.current.postMessage({\n        action: 'predict',\n        userPatterns,\n        components: componentLoader.current.getRegisteredComponents()\n      });\n    } else {\n      // Run prediction in main thread if worker not available\n      const userPatterns = behaviorAnalysis.current.getCurrentPatterns();\n      const predictions = predictionEngine.current.predictComponentUsage(\n        userPatterns,\n        componentLoader.current.getRegisteredComponents()\n      );\n      \n      if (predictions && predictions.length > 0) {\n        logger.debug('Generated predictions:', predictions.length);\n        componentLoader.current.updateLoadingPriorities(predictions);\n      }\n    }\n    \n    // If this was a component usage event, mark it as used\n    if (interactionData.type === 'use' || interactionData.type === 'render') {\n      componentLoader.current.markComponentUsed(componentId);\n    }\n    \n    return interaction;\n  };\n  \n  /**\n   * Register a component with ReactSmart\n   * @param {string} componentId - ID of the component\n   * @param {object} componentData - Metadata about the component\n   */\n  const registerComponent = (componentId, componentData) => {\n    if (!isInitialized || options.disabled) return;\n    \n    logger.debug('Registering component:', componentId);\n    componentLoader.current.registerComponent(componentId, componentData);\n  };\n  \n  /**\n   * Explicitly preload a component\n   * @param {string} componentId - ID of the component to preload\n   */\n  const preloadComponent = (componentId) => {\n    if (!isInitialized || options.disabled) return;\n    \n    logger.debug('Explicitly preloading component:', componentId);\n    componentLoader.current.loadComponent(componentId, 'high');\n  };\n  \n  /**\n   * Get the current loading priority for a component\n   * @param {string} componentId - ID of the component\n   * @returns {string} Priority level ('high', 'medium', 'low')\n   */\n  const getLoadingPriority = (componentId) => {\n    if (!isInitialized || options.disabled) return 'medium';\n    return componentLoader.current.getComponentPriority(componentId);\n  };\n  \n  /**\n   * Check if a component is loaded\n   * @param {string} componentId - ID of the component\n   * @returns {boolean} Whether the component is loaded\n   */\n  const isComponentLoaded = (componentId) => {\n    if (!isInitialized || options.disabled) return false;\n    return componentLoader.current.isComponentLoaded(componentId);\n  };\n  \n  /**\n   * Get metrics about ReactSmart's performance\n   * @returns {object} Performance metrics\n   */\n  const getMetrics = () => {\n    if (!isInitialized || options.disabled) {\n      return {\n        predictionAccuracy: 0,\n        preloadedCount: 0,\n        usedPreloadedCount: 0,\n        hitRate: 0,\n        networkSavingsKB: 0\n      };\n    }\n    \n    const predictionMetrics = predictionEngine.current.getMetrics();\n    const loaderMetrics = componentLoader.current.getMetrics();\n    \n    return {\n      predictionAccuracy: predictionMetrics.lastAccuracy * 100,\n      preloadedCount: loaderMetrics.preloadedComponentCount,\n      usedPreloadedCount: loaderMetrics.usedPreloadedCount,\n      hitRate: loaderMetrics.preloadHitRate * 100,\n      networkSavingsKB: loaderMetrics.networkSavingsKB\n    };\n  };\n  \n  // Context value to be provided to consumers\n  const contextValue = {\n    trackInteraction,\n    registerComponent,\n    preloadComponent,\n    getLoadingPriority,\n    isComponentLoaded,\n    getMetrics,\n    networkStatus,\n    isInitialized: isInitialized && !options.disabled\n  };\n  \n  return (\n    <ReactSmartContext.Provider value={contextValue}>\n      {children}\n    </ReactSmartContext.Provider>\n  );\n};\n\nReactSmartProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  options: PropTypes.shape({\n    networkAdaptation: PropTypes.bool,\n    learningRate: PropTypes.number,\n    anonymizeData: PropTypes.bool,\n    privacyCompliance: PropTypes.string,\n    dataRetentionDays: PropTypes.number,\n    disabled: PropTypes.bool,\n    predictionModel: PropTypes.oneOf(['probabilistic', 'markovChain', 'transformer']),\n    debug: PropTypes.bool,\n    logLevel: PropTypes.oneOf(['debug', 'info', 'warn', 'error']),\n    maxConcurrentLoads: PropTypes.number,\n    maxCacheSize: PropTypes.number,\n    compatibility: PropTypes.oneOf(['modern', 'legacy'])\n  })\n};\n\nexport default ReactSmartProvider;","import React, { useEffect, useRef, useContext } from 'react';\nimport { ReactSmartContext } from './ReactSmartProvider';\n\n/**\n * Higher-order component that enhances a React component with ReactSmart capabilities.\n * This adds tracking, interaction analysis, and optimized loading.\n * \n * @param {React.Component} WrappedComponent - Component to enhance\n * @param {Object} options - Configuration options\n * @param {boolean} options.analyzeInteractions - Whether to analyze user interactions\n * @param {number} options.predictionThreshold - Threshold for prediction confidence\n * @param {Array} options.preloadDependencies - Dependencies to preload with this component\n * @param {string} options.importance - Component importance ('high', 'medium', 'low')\n * @returns {React.Component} - Enhanced component\n */\nconst withReactSmart = (WrappedComponent, options = {}) => {\n  const {\n    analyzeInteractions = true,\n    predictionThreshold = 0.6,\n    preloadDependencies = [],\n    importance = 'medium',\n    trackMounts = true,\n    trackClicks = true,\n    trackVisibility = true,\n    trackHovers = false\n  } = options;\n  \n  // Component display name for better debugging\n  const displayName = WrappedComponent.displayName || \n                      WrappedComponent.name || \n                      'Component';\n  \n  // Create the enhanced component\n  const WithReactSmart = React.forwardRef((props, ref) => {\n    // Get ReactSmart context\n    const {\n      trackInteraction,\n      registerComponent,\n      preloadComponent,\n      isInitialized\n    } = useContext(ReactSmartContext);\n    \n    // Create references\n    const componentRef = useRef(null);\n    const rootRef = useRef(null);\n    const visibilityObserverRef = useRef(null);\n    const mountTimeRef = useRef(null);\n    \n    // Generate component ID based on display name and props\n    const componentId = `${displayName}:${props.id || props.key || 'instance'}`;\n    \n    // Register component with ReactSmart\n    useEffect(() => {\n      if (!isInitialized) return;\n      \n      // Register this component\n      registerComponent(componentId, {\n        id: componentId,\n        type: 'component',\n        importance,\n        dependencies: preloadDependencies,\n        size: options.size || 10, // Size in KB (estimated if not provided)\n        predictionThreshold,\n        metadata: {\n          displayName,\n          props: Object.keys(props),\n          ...options\n        }\n      });\n      \n      // Register dependencies if any\n      preloadDependencies.forEach(depId => {\n        registerComponent(depId, {\n          id: depId,\n          type: 'dependency',\n          parentComponent: componentId\n        });\n      });\n      \n      // Track mount event\n      if (trackMounts) {\n        trackInteraction(componentId, {\n          type: 'mount',\n          timestamp: Date.now()\n        });\n        \n        mountTimeRef.current = Date.now();\n      }\n      \n      // Return cleanup function\n      return () => {\n        // Track unmount event\n        if (trackMounts && mountTimeRef.current) {\n          const duration = Date.now() - mountTimeRef.current;\n          \n          trackInteraction(componentId, {\n            type: 'unmount',\n            timestamp: Date.now(),\n            duration\n          });\n        }\n        \n        // Disconnect visibility observer if it exists\n        if (visibilityObserverRef.current) {\n          visibilityObserverRef.current.disconnect();\n          visibilityObserverRef.current = null;\n        }\n      };\n    }, [isInitialized, componentId, props.id, props.key]);\n    \n    // Set up visibility tracking\n    useEffect(() => {\n      if (!isInitialized || !analyzeInteractions || !trackVisibility || !rootRef.current) return;\n      \n      // Check if Intersection Observer API is available\n      if (typeof IntersectionObserver === 'undefined') {\n        console.warn(`ReactSmart: IntersectionObserver not supported in this browser. Visibility tracking disabled for ${componentId}.`);\n        return;\n      }\n      \n      // Track when component first becomes visible\n      let firstVisibleTime = null;\n      \n      // Create observer instance\n      const observer = new IntersectionObserver(\n        (entries) => {\n          entries.forEach(entry => {\n            if (entry.isIntersecting) {\n              const timestamp = Date.now();\n              \n              // Track first visibility\n              if (!firstVisibleTime) {\n                firstVisibleTime = timestamp;\n                \n                // Track visibility event\n                trackInteraction(componentId, {\n                  type: 'visibility',\n                  subType: 'visible',\n                  timestamp,\n                  viewportCoverage: entry.intersectionRatio\n                });\n                \n                // Preload dependencies when component becomes visible\n                preloadDependencies.forEach(depId => {\n                  preloadComponent(depId);\n                });\n              }\n            } else if (firstVisibleTime) {\n              // Component was visible but is now hidden\n              const duration = Date.now() - firstVisibleTime;\n              \n              // Only track if visible for a meaningful time\n              if (duration > 100) {\n                trackInteraction(componentId, {\n                  type: 'visibility',\n                  subType: 'hidden',\n                  timestamp: Date.now(),\n                  duration\n                });\n              }\n              \n              // Reset first visible time\n              firstVisibleTime = null;\n            }\n          });\n        },\n        {\n          threshold: [0, 0.2, 0.5, 0.8, 1],\n          rootMargin: '0px'\n        }\n      );\n      \n      // Start observing the component\n      observer.observe(rootRef.current);\n      visibilityObserverRef.current = observer;\n      \n      return () => {\n        observer.disconnect();\n      };\n    }, [isInitialized, componentId, analyzeInteractions, trackVisibility, preloadDependencies]);\n    \n    // Set up click tracking\n    useEffect(() => {\n      if (!isInitialized || !analyzeInteractions || !trackClicks || !rootRef.current) return;\n      \n      const element = rootRef.current;\n      \n      const handleClick = (event) => {\n        trackInteraction(componentId, {\n          type: 'click',\n          timestamp: Date.now(),\n          target: event.target.tagName,\n          position: {\n            x: event.clientX,\n            y: event.clientY\n          }\n        });\n      };\n      \n      element.addEventListener('click', handleClick);\n      \n      return () => {\n        element.removeEventListener('click', handleClick);\n      };\n    }, [isInitialized, componentId, analyzeInteractions, trackClicks]);\n    \n    // Set up hover tracking if enabled\n    useEffect(() => {\n      if (!isInitialized || !analyzeInteractions || !trackHovers || !rootRef.current) return;\n      \n      const element = rootRef.current;\n      let hoverTimeout;\n      let hoverStartTime;\n      let isHovering = false;\n      \n      const handleMouseEnter = () => {\n        if (!isHovering) {\n          isHovering = true;\n          hoverStartTime = Date.now();\n          \n          trackInteraction(componentId, {\n            type: 'hover',\n            subType: 'enter',\n            timestamp: hoverStartTime\n          });\n        }\n      };\n      \n      const handleMouseLeave = () => {\n        if (isHovering) {\n          isHovering = false;\n          clearTimeout(hoverTimeout);\n          \n          const duration = Date.now() - hoverStartTime;\n          \n          // Only track hover if it lasted a significant time\n          if (duration > 300) {\n            trackInteraction(componentId, {\n              type: 'hover',\n              subType: 'leave',\n              timestamp: Date.now(),\n              duration\n            });\n          }\n        }\n      };\n      \n      element.addEventListener('mouseenter', handleMouseEnter);\n      element.addEventListener('mouseleave', handleMouseLeave);\n      \n      return () => {\n        element.removeEventListener('mouseenter', handleMouseEnter);\n        element.removeEventListener('mouseleave', handleMouseLeave);\n        clearTimeout(hoverTimeout);\n      };\n    }, [isInitialized, componentId, analyzeInteractions, trackHovers]);\n    \n    // Combine provided ref with our internal ref\n    const setRootRef = (element) => {\n      rootRef.current = element;\n      \n      // If a ref was passed through props, update it too\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(element);\n        } else {\n          ref.current = element;\n        }\n      }\n    };\n    \n    // Custom tracking methods that can be called from the wrapped component\n    const trackCustomInteraction = (type, data = {}) => {\n      if (!isInitialized || !analyzeInteractions) return;\n      \n      trackInteraction(componentId, {\n        type,\n        timestamp: Date.now(),\n        ...data\n      });\n    };\n    \n    // Method to manually preload dependencies\n    const preloadDependency = (dependencyId) => {\n      if (!isInitialized) return;\n      preloadComponent(dependencyId);\n    };\n    \n    // Render the wrapped component with the tracking ref and additional props\n    return (\n      <WrappedComponent\n        {...props}\n        ref={componentRef}\n        rootRef={setRootRef}\n        reactSmartId={componentId}\n        trackInteraction={trackCustomInteraction}\n        preloadDependency={preloadDependency}\n        preloadDependencies={() => {\n          preloadDependencies.forEach(preloadDependency);\n        }}\n      />\n    );\n  });\n  \n  // Set display name for better debugging\n  WithReactSmart.displayName = `withReactSmart(${displayName})`;\n  \n  return WithReactSmart;\n};\n\nexport default withReactSmart;","import React, { useEffect, useContext } from 'react';\nimport { Route } from 'react-router-dom';\nimport { ReactSmartContext } from './ReactSmartProvider';\nimport PropTypes from 'prop-types';\n\n/**\n * Enhanced Route component that integrates with ReactSmart for\n * intelligent route-based component loading.\n */\nconst SmartRoute = ({\n  path,\n  component: Component,\n  preloadRelated = [],\n  analyzeRouteUsage = true,\n  trackRouteMetrics = true,\n  priority = 'medium',\n  ...rest\n}) => {\n  const { \n    trackInteraction, \n    registerComponent, \n    preloadComponent,\n    isInitialized \n  } = useContext(ReactSmartContext);\n  \n  // Generate a stable component ID based on the route path\n  const routeId = `route:${path}`;\n  \n  // Register this route with ReactSmart\n  useEffect(() => {\n    if (!isInitialized) return;\n    \n    // Register the route as a component\n    registerComponent(routeId, {\n      id: routeId,\n      type: 'route',\n      path,\n      priority,\n      dependencies: preloadRelated,\n      metadata: {\n        preloadRelated,\n        analyzeRouteUsage,\n        trackRouteMetrics\n      }\n    });\n    \n    // Register related components for preloading\n    preloadRelated.forEach(relatedId => {\n      // Mark related components as dependencies of this route\n      registerComponent(relatedId, {\n        id: relatedId,\n        type: 'component',\n        priority: 'medium',\n        relatedRoute: routeId,\n        isPreloadTarget: true\n      });\n    });\n  }, [isInitialized, registerComponent, routeId, path, preloadRelated, priority, analyzeRouteUsage, trackRouteMetrics]);\n  \n  // Wrap the component to add tracking\n  const WrappedComponent = props => {\n    useEffect(() => {\n      if (!isInitialized || !analyzeRouteUsage) return;\n      \n      // Track route usage when component mounts\n      trackInteraction(routeId, {\n        type: 'navigation',\n        path,\n        timestamp: Date.now(),\n        routeProps: rest,\n        queryParams: new URLSearchParams(props.location?.search).toString(),\n        referrer: document.referrer || props.history?.action || null\n      });\n      \n      // Preload related components\n      preloadRelated.forEach(relatedId => {\n        preloadComponent(relatedId);\n      });\n      \n      // Start timing the route duration\n      const routeEnterTime = Date.now();\n      \n      // Return cleanup function\n      return () => {\n        // Track route exit when component unmounts\n        const duration = Date.now() - routeEnterTime;\n        \n        if (duration > 500) { // Only track meaningful visits\n          trackInteraction(routeId, {\n            type: 'navigation-exit',\n            path,\n            timestamp: Date.now(),\n            duration,\n            nextRoute: window.location.pathname\n          });\n        }\n      };\n    }, [props.location?.pathname]);\n    \n    // Render the wrapped component\n    return <Component {...props} />;\n  };\n  \n  WrappedComponent.displayName = `SmartRoute(${Component.displayName || Component.name || 'Component'})`;\n  \n  // Return enhanced Route\n  return (\n    <Route\n      path={path}\n      {...rest}\n      render={routeProps => <WrappedComponent {...routeProps} />}\n    />\n  );\n};\n\n// Add compatibility for React Router v6\n// This section allows the component to work with both v5 and v6 API\nif (typeof Route.render === 'undefined') {\n  // We're using React Router v6\n  const SmartRouteV6 = ({\n    path,\n    component: Component,\n    preloadRelated = [],\n    analyzeRouteUsage = true,\n    trackRouteMetrics = true,\n    priority = 'medium',\n    ...rest\n  }) => {\n    const { \n      trackInteraction, \n      registerComponent, \n      preloadComponent,\n      isInitialized \n    } = useContext(ReactSmartContext);\n    \n    // Generate a stable component ID based on the route path\n    const routeId = `route:${path}`;\n    \n    // Register this route with ReactSmart\n    useEffect(() => {\n      if (!isInitialized) return;\n      \n      // Register the route as a component\n      registerComponent(routeId, {\n        id: routeId,\n        type: 'route',\n        path,\n        priority,\n        dependencies: preloadRelated,\n        metadata: {\n          preloadRelated,\n          analyzeRouteUsage,\n          trackRouteMetrics\n        }\n      });\n      \n      // Register related components for preloading\n      preloadRelated.forEach(relatedId => {\n        // Mark related components as dependencies of this route\n        registerComponent(relatedId, {\n          id: relatedId,\n          type: 'component',\n          priority: 'medium',\n          relatedRoute: routeId,\n          isPreloadTarget: true\n        });\n      });\n    }, [isInitialized, registerComponent, routeId, path, preloadRelated, priority, analyzeRouteUsage, trackRouteMetrics]);\n    \n    // For v6, we use a wrapper component approach\n    const SmartRouteElement = () => {\n      const location = window.location;\n      \n      useEffect(() => {\n        if (!isInitialized || !analyzeRouteUsage) return;\n        \n        // Track route usage when component mounts\n        trackInteraction(routeId, {\n          type: 'navigation',\n          path,\n          timestamp: Date.now(),\n          routeProps: rest,\n          queryParams: new URLSearchParams(location.search).toString(),\n          referrer: document.referrer || null\n        });\n        \n        // Preload related components\n        preloadRelated.forEach(relatedId => {\n          preloadComponent(relatedId);\n        });\n        \n        // Start timing the route duration\n        const routeEnterTime = Date.now();\n        \n        // Return cleanup function\n        return () => {\n          // Track route exit when component unmounts\n          const duration = Date.now() - routeEnterTime;\n          \n          if (duration > 500) { // Only track meaningful visits\n            trackInteraction(routeId, {\n              type: 'navigation-exit',\n              path,\n              timestamp: Date.now(),\n              duration,\n              nextRoute: window.location.pathname\n            });\n          }\n        };\n      }, [location.pathname]);\n      \n      return <Component {...rest} />;\n    };\n    \n    SmartRouteElement.displayName = `SmartRoute(${Component.displayName || Component.name || 'Component'})`;\n    \n    // Import necessary components from react-router-dom v6\n    try {\n      const { Routes, Route } = require('react-router-dom');\n      \n      // Return React Router v6 compatible route\n      return (\n        <Routes>\n          <Route path={path} element={<SmartRouteElement />} />\n        </Routes>\n      );\n    } catch (error) {\n      console.error('Error importing react-router-dom components:', error);\n      return <Component {...rest} />;\n    }\n  };\n  \n  // Replace the v5 implementation with v6 implementation\n  SmartRoute = SmartRouteV6;\n}\n\nSmartRoute.propTypes = {\n  path: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string)\n  ]).isRequired,\n  component: PropTypes.elementType.isRequired,\n  preloadRelated: PropTypes.arrayOf(PropTypes.string),\n  analyzeRouteUsage: PropTypes.bool,\n  trackRouteMetrics: PropTypes.bool,\n  priority: PropTypes.oneOf(['high', 'medium', 'low']),\n};\n\nexport default SmartRoute;","import { useContext, useRef, useEffect, useCallback } from 'react';\nimport { ReactSmartContext } from '../ReactSmartProvider';\n\n/**\n * Hook for tracking component interactions and usage patterns\n * \n * This hook provides methods to track interactions with components,\n * allowing the prediction engine to learn from user behavior.\n * \n * @param {string} componentId - Unique identifier for the component\n * @param {Object} options - Configuration options for the tracker\n * @param {boolean} options.trackMounts - Whether to track component mounts (default: true)\n * @param {boolean} options.trackUnmounts - Whether to track component unmounts (default: true)\n * @param {boolean} options.trackClicks - Whether to track clicks within the component (default: true)\n * @param {boolean} options.trackHovers - Whether to track hover interactions (default: true)\n * @param {boolean} options.trackVisibility - Whether to track visibility in viewport (default: true)\n * @param {Array} options.dependencies - Component dependencies to preload\n * @param {string} options.importance - Component importance ('high', 'medium', 'low')\n * @returns {Object} Component tracking methods and state\n */\nconst useComponentTracker = (componentId, options = {}) => {\n  const {\n    trackMounts = true,\n    trackUnmounts = true,\n    trackClicks = true,\n    trackHovers = true,\n    trackVisibility = true,\n    dependencies = [],\n    importance = 'medium'\n  } = options;\n  \n  // Get ReactSmart context\n  const {\n    trackInteraction,\n    registerComponent,\n    preloadComponent,\n    getLoadingPriority,\n    isInitialized\n  } = useContext(ReactSmartContext);\n  \n  // Create refs to track component state\n  const rootRef = useRef(null);\n  const isVisibleRef = useRef(false);\n  const visibilityObserverRef = useRef(null);\n  const mountTimeRef = useRef(null);\n  \n  // Generate a stable component ID if not provided\n  const resolvedComponentId = componentId || 'anonymous-component';\n  \n  // Register the component with ReactSmart\n  useEffect(() => {\n    if (!isInitialized) return;\n    \n    // Register this component\n    registerComponent(resolvedComponentId, {\n      id: resolvedComponentId,\n      type: 'component',\n      importance,\n      dependencies,\n      metadata: {\n        registeredAt: Date.now(),\n        ...options\n      }\n    });\n    \n    // Component might have dependencies to preload\n    dependencies.forEach(depId => {\n      registerComponent(depId, {\n        id: depId,\n        type: 'dependency',\n        parentComponent: resolvedComponentId\n      });\n    });\n    \n    // Track mount event\n    if (trackMounts) {\n      trackInteraction(resolvedComponentId, {\n        type: 'mount',\n        timestamp: Date.now()\n      });\n      \n      mountTimeRef.current = Date.now();\n    }\n    \n    // Return cleanup function\n    return () => {\n      // Track unmount event\n      if (trackUnmounts && mountTimeRef.current) {\n        const duration = Date.now() - mountTimeRef.current;\n        \n        trackInteraction(resolvedComponentId, {\n          type: 'unmount',\n          timestamp: Date.now(),\n          duration\n        });\n      }\n      \n      // Disconnect observer if it exists\n      if (visibilityObserverRef.current) {\n        visibilityObserverRef.current.disconnect();\n        visibilityObserverRef.current = null;\n      }\n    };\n  }, [isInitialized, resolvedComponentId, trackMounts, trackUnmounts, ...dependencies]);\n  \n  // Set up visibility tracking if requested\n  useEffect(() => {\n    if (!isInitialized || !trackVisibility || !rootRef.current) return;\n    \n    // Check if Intersection Observer API is available\n    if (typeof IntersectionObserver === 'undefined') {\n      console.warn('ReactSmart: IntersectionObserver not supported in this browser. Visibility tracking disabled.');\n      return;\n    }\n    \n    // Initialize last visibility timestamp\n    let lastVisibilityTimestamp = 0;\n    \n    // Create an observer to track component visibility\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach(entry => {\n          const isVisible = entry.isIntersecting;\n          const timestamp = Date.now();\n          \n          // Only track visibility changes\n          if (isVisible !== isVisibleRef.current) {\n            isVisibleRef.current = isVisible;\n            \n            if (isVisible) {\n              // Component became visible\n              trackInteraction(resolvedComponentId, {\n                type: 'visibility',\n                subType: 'visible',\n                timestamp,\n                viewportCoverage: entry.intersectionRatio\n              });\n              \n              lastVisibilityTimestamp = timestamp;\n            } else {\n              // Component is no longer visible\n              const duration = timestamp - lastVisibilityTimestamp;\n              \n              // Only track if it was visible for a meaningful time\n              if (duration > 100) {\n                trackInteraction(resolvedComponentId, {\n                  type: 'visibility',\n                  subType: 'hidden',\n                  timestamp,\n                  duration\n                });\n              }\n            }\n          }\n        });\n      },\n      {\n        threshold: [0, 0.1, 0.5, 0.9],\n        rootMargin: '0px'\n      }\n    );\n    \n    // Start observing the component\n    observer.observe(rootRef.current);\n    visibilityObserverRef.current = observer;\n    \n    // Cleanup on unmount\n    return () => {\n      if (observer) {\n        observer.disconnect();\n        visibilityObserverRef.current = null;\n      }\n    };\n  }, [isInitialized, resolvedComponentId, trackVisibility]);\n  \n  // Track click events\n  const trackClickEvent = useCallback((event, customData = {}) => {\n    if (!isInitialized) return;\n    \n    trackInteraction(resolvedComponentId, {\n      type: 'click',\n      timestamp: Date.now(),\n      target: event.target.tagName,\n      position: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      ...customData\n    });\n  }, [isInitialized, resolvedComponentId, trackInteraction]);\n  \n  // Track hover events\n  const trackHoverEvent = useCallback((event, customData = {}) => {\n    if (!isInitialized) return;\n    \n    trackInteraction(resolvedComponentId, {\n      type: 'hover',\n      timestamp: Date.now(),\n      target: event.target.tagName,\n      position: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      ...customData\n    });\n  }, [isInitialized, resolvedComponentId, trackInteraction]);\n  \n  // Generic interaction tracking function\n  const trackCustomInteraction = useCallback((interactionType, data = {}) => {\n    if (!isInitialized) return;\n    \n    trackInteraction(resolvedComponentId, {\n      type: interactionType,\n      timestamp: Date.now(),\n      ...data\n    });\n  }, [isInitialized, resolvedComponentId, trackInteraction]);\n  \n  // Set up click event listener if requested\n  useEffect(() => {\n    if (!isInitialized || !trackClicks || !rootRef.current) return;\n    \n    const element = rootRef.current;\n    \n    // Add click event listener\n    element.addEventListener('click', trackClickEvent);\n    \n    // Cleanup on unmount\n    return () => {\n      element.removeEventListener('click', trackClickEvent);\n    };\n  }, [isInitialized, trackClicks, trackClickEvent]);\n  \n  // Set up hover event listener if requested\n  useEffect(() => {\n    if (!isInitialized || !trackHovers || !rootRef.current) return;\n    \n    const element = rootRef.current;\n    let hoverTimeout;\n    let isHovering = false;\n    \n    // Track mouseenter with debounce\n    const handleMouseEnter = (event) => {\n      if (!isHovering) {\n        isHovering = true;\n        trackHoverEvent(event, { subType: 'enter' });\n      }\n    };\n    \n    // Track mouseleave with debounce\n    const handleMouseLeave = (event) => {\n      if (isHovering) {\n        isHovering = false;\n        trackHoverEvent(event, { subType: 'leave' });\n      }\n    };\n    \n    // Add hover event listeners\n    element.addEventListener('mouseenter', handleMouseEnter);\n    element.addEventListener('mouseleave', handleMouseLeave);\n    \n    // Cleanup on unmount\n    return () => {\n      element.removeEventListener('mouseenter', handleMouseEnter);\n      element.removeEventListener('mouseleave', handleMouseLeave);\n      clearTimeout(hoverTimeout);\n    };\n  }, [isInitialized, trackHovers, trackHoverEvent]);\n  \n  // Manual preload function for dependencies\n  const preloadDependencies = useCallback(() => {\n    if (!isInitialized) return;\n    \n    dependencies.forEach(depId => {\n      preloadComponent(depId);\n    });\n  }, [isInitialized, dependencies, preloadComponent]);\n  \n  return {\n    rootRef, // Ref to attach to the root element of the component\n    isVisible: isVisibleRef.current,\n    trackInteraction: trackCustomInteraction, // Method to track custom interactions\n    trackClick: trackClickEvent, // Method to track click events\n    trackHover: trackHoverEvent, // Method to track hover events\n    preloadDependencies, // Method to manually preload dependencies\n    priority: getLoadingPriority(resolvedComponentId), // Current loading priority\n    componentId: resolvedComponentId // The resolved component ID\n  };\n};\n\nexport default useComponentTracker;","import { useContext, useState, useEffect, useCallback } from 'react';\nimport { ReactSmartContext } from '../ReactSmartProvider';\nimport { detectNetworkConditions, categorizeNetworkQuality } from '../../core/utils/networkUtils';\n\n/**\n * Hook for making components network-aware\n * \n * This hook provides network condition information and helper functions\n * to adapt component behavior based on network quality.\n * \n * @param {Object} options - Configuration options\n * @param {boolean} options.monitorChanges - Whether to monitor network changes (default: true)\n * @param {number} options.pollInterval - Polling interval in ms for browsers without NetworkInformation API (default: 30000)\n * @param {Function} options.onNetworkChange - Callback when network conditions change\n * @returns {Object} Network status information and helper functions\n */\nconst useNetworkAware = (options = {}) => {\n  const {\n    monitorChanges = true,\n    pollInterval = 30000,\n    onNetworkChange = null\n  } = options;\n  \n  // Get ReactSmart context\n  const { networkStatus, isInitialized } = useContext(ReactSmartContext);\n  \n  // Local state for network status (initial value from context)\n  const [localNetworkStatus, setLocalNetworkStatus] = useState(networkStatus);\n  \n  // Local state for network quality category\n  const [networkQuality, setNetworkQuality] = useState(() => \n    categorizeNetworkQuality(networkStatus)\n  );\n  \n  // Helper variables for common checks\n  const [isGoodConnection, setIsGoodConnection] = useState(() =>\n    ['excellent', 'good'].includes(categorizeNetworkQuality(networkStatus))\n  );\n  \n  const [isSaveDataMode, setIsSaveDataMode] = useState(() =>\n    networkStatus.saveData === true\n  );\n  \n  // Effect to synchronize with context network status\n  useEffect(() => {\n    if (isInitialized) {\n      setLocalNetworkStatus(networkStatus);\n      const quality = categorizeNetworkQuality(networkStatus);\n      setNetworkQuality(quality);\n      setIsGoodConnection(['excellent', 'good'].includes(quality));\n      setIsSaveDataMode(networkStatus.saveData === true);\n    }\n  }, [isInitialized, networkStatus]);\n  \n  // Effect to set up additional monitoring if requested\n  useEffect(() => {\n    if (!isInitialized || !monitorChanges) return;\n    \n    let intervalId = null;\n    \n    const updateNetworkStatus = () => {\n      const newStatus = detectNetworkConditions();\n      setLocalNetworkStatus(newStatus);\n      \n      const quality = categorizeNetworkQuality(newStatus);\n      setNetworkQuality(quality);\n      setIsGoodConnection(['excellent', 'good'].includes(quality));\n      setIsSaveDataMode(newStatus.saveData === true);\n      \n      if (onNetworkChange && typeof onNetworkChange === 'function') {\n        onNetworkChange(newStatus, quality);\n      }\n    };\n    \n    // Set up event listener for Network Information API if available\n    if (navigator.connection) {\n      navigator.connection.addEventListener('change', updateNetworkStatus);\n    } \n    // Otherwise, poll at the specified interval\n    else if (pollInterval > 0) {\n      intervalId = setInterval(updateNetworkStatus, pollInterval);\n    }\n    \n    // Additional event listeners for online/offline status\n    window.addEventListener('online', updateNetworkStatus);\n    window.addEventListener('offline', updateNetworkStatus);\n    \n    // Cleanup function\n    return () => {\n      if (navigator.connection) {\n        navigator.connection.removeEventListener('change', updateNetworkStatus);\n      }\n      \n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n      \n      window.removeEventListener('online', updateNetworkStatus);\n      window.removeEventListener('offline', updateNetworkStatus);\n    };\n  }, [isInitialized, monitorChanges, pollInterval, onNetworkChange]);\n  \n  /**\n   * Check if current network quality meets a minimum threshold\n   * @param {string} minimumQuality - Minimum quality level ('excellent', 'good', 'fair', 'poor')\n   * @returns {boolean} Whether current network meets the threshold\n   */\n  const meetsQualityThreshold = useCallback((minimumQuality) => {\n    const qualityLevels = ['excellent', 'good', 'fair', 'poor', 'offline'];\n    const currentIndex = qualityLevels.indexOf(networkQuality);\n    const thresholdIndex = qualityLevels.indexOf(minimumQuality);\n    \n    return currentIndex !== -1 && thresholdIndex !== -1 && currentIndex <= thresholdIndex;\n  }, [networkQuality]);\n  \n  /**\n   * Calculate appropriate resource size based on network conditions\n   * @param {Object} sizeOptions - Size options for different network qualities\n   * @param {number} sizeOptions.excellent - Size for excellent connections (default: 1)\n   * @param {number} sizeOptions.good - Size for good connections (default: 0.8)\n   * @param {number} sizeOptions.fair - Size for fair connections (default: 0.6)\n   * @param {number} sizeOptions.poor - Size for poor connections (default: 0.4)\n   * @param {number} sizeOptions.offline - Size for offline mode (default: 0)\n   * @returns {number} Appropriate resource size multiplier\n   */\n  const getAdaptiveSize = useCallback((sizeOptions = {}) => {\n    const defaults = {\n      excellent: 1,\n      good: 0.8,\n      fair: 0.6, \n      poor: 0.4,\n      offline: 0\n    };\n    \n    const options = { ...defaults, ...sizeOptions };\n    return options[networkQuality] || options.fair;\n  }, [networkQuality]);\n  \n  /**\n   * Select the appropriate resource variant based on network quality\n   * @param {Object} variants - Resource variants for different network qualities\n   * @param {any} variants.excellent - Variant for excellent connections\n   * @param {any} variants.good - Variant for good connections\n   * @param {any} variants.fair - Variant for fair connections\n   * @param {any} variants.poor - Variant for poor connections\n   * @param {any} variants.offline - Variant for offline mode\n   * @param {any} variants.default - Default variant if quality-specific one not provided\n   * @returns {any} Selected resource variant\n   */\n  const selectResourceVariant = useCallback((variants) => {\n    if (!variants || typeof variants !== 'object') {\n      return variants;\n    }\n    \n    if (variants[networkQuality] !== undefined) {\n      return variants[networkQuality];\n    }\n    \n    // Fall back to the next best quality\n    const qualityOrder = ['excellent', 'good', 'fair', 'poor', 'offline'];\n    const currentIndex = qualityOrder.indexOf(networkQuality);\n    \n    if (currentIndex === -1) {\n      return variants.default || variants.fair;\n    }\n    \n    // Look for the next available quality\n    for (let i = currentIndex + 1; i < qualityOrder.length; i++) {\n      const quality = qualityOrder[i];\n      if (variants[quality] !== undefined) {\n        return variants[quality];\n      }\n    }\n    \n    // Look for previous better quality\n    for (let i = currentIndex - 1; i >= 0; i--) {\n      const quality = qualityOrder[i];\n      if (variants[quality] !== undefined) {\n        return variants[quality];\n      }\n    }\n    \n    return variants.default;\n  }, [networkQuality]);\n  \n  /**\n   * Estimate loading time for a resource based on its size\n   * @param {number} sizeKB - Size of the resource in kilobytes\n   * @returns {number} Estimated loading time in milliseconds\n   */\n  const estimateLoadTime = useCallback((sizeKB) => {\n    const { downlink, rtt } = localNetworkStatus;\n    \n    // Base latency on RTT\n    const latency = rtt || 100; // default to 100ms if RTT is unknown\n    \n    // Base bandwidth on downlink\n    const bandwidth = downlink || 1; // default to 1Mbps if downlink is unknown\n    \n    // Calculate transfer time: size (in bits) / bandwidth (in bits per second)\n    // Convert KB to bits (× 8 × 1024), and Mbps to bps (× 1024 × 1024)\n    const transferTime = (sizeKB * 8 * 1024) / (bandwidth * 1024 * 1024) * 1000;\n    \n    // Total load time = latency + transfer time\n    return latency + transferTime;\n  }, [localNetworkStatus]);\n  \n  return {\n    networkStatus: localNetworkStatus,\n    networkQuality,\n    isOnline: localNetworkStatus.online,\n    isGoodConnection,\n    isFairConnection: networkQuality === 'fair',\n    isPoorConnection: networkQuality === 'poor',\n    isOffline: networkQuality === 'offline',\n    isSaveDataMode,\n    \n    // Helper functions\n    meetsQualityThreshold,\n    getAdaptiveSize,\n    selectResourceVariant,\n    estimateLoadTime\n  };\n};\n\nexport default useNetworkAware;","/**\n * Adaptive Loading Queue \n * \n * Manages prioritized component loading based on predictions,\n * network conditions, and resource constraints.\n */\nclass AdaptiveLoadingQueue {\n    /**\n     * Create a new AdaptiveLoadingQueue instance\n     * @param {Object} options - Configuration options\n     * @param {number} options.highPriorityThreshold - Probability threshold for high priority (default: 0.8)\n     * @param {number} options.mediumPriorityThreshold - Probability threshold for medium priority (default: 0.5)\n     * @param {number} options.maxConcurrentLoads - Maximum number of concurrent component loads (default: 5)\n     * @param {boolean} options.adaptToNetwork - Whether to adapt loading strategy to network conditions (default: true)\n     */\n    constructor(options = {}) {\n      this.options = {\n        highPriorityThreshold: 0.8,\n        mediumPriorityThreshold: 0.5,\n        maxConcurrentLoads: 5,\n        adaptToNetwork: true,\n        ...options\n      };\n      \n      // Priority queues\n      this.highPriority = new Set();\n      this.mediumPriority = new Set();\n      this.lowPriority = new Set();\n      \n      // Component metadata registry\n      this.componentRegistry = new Map();\n      \n      // Resource hint registry\n      this.resourceHints = new Map();\n      \n      // Track currently loading components\n      this.loadingComponents = new Set();\n      \n      // Track loaded components\n      this.loadedComponents = new Set();\n      \n      // Network state\n      this.network = {\n        type: '4g',\n        effectiveType: '4g',\n        downlink: 10,\n        rtt: 50\n      };\n      \n      // Detect network conditions if available\n      this.detectNetworkConditions();\n      \n      // Set up network monitoring\n      this.setupNetworkMonitoring();\n    }\n    \n    /**\n     * Initialize network condition detection\n     */\n    detectNetworkConditions() {\n      if (!this.options.adaptToNetwork) return;\n      \n      if (navigator.connection) {\n        const connection = navigator.connection;\n        this.network = {\n          type: connection.type,\n          effectiveType: connection.effectiveType,\n          downlink: connection.downlink,\n          rtt: connection.rtt\n        };\n      }\n    }\n    \n    /**\n     * Setup ongoing network monitoring\n     */\n    setupNetworkMonitoring() {\n      if (!this.options.adaptToNetwork) return;\n      \n      // Listen for network changes if supported\n      if (navigator.connection) {\n        navigator.connection.addEventListener('change', () => {\n          this.detectNetworkConditions();\n          this.rebalanceQueues();\n        });\n      }\n      \n      // Fallback polling for browsers without Network Information API\n      else {\n        // No reliable way to detect network changes, so we'll\n        // periodically check performance of resource loading\n        this.networkCheckInterval = setInterval(() => {\n          // Estimate network conditions based on recent load performance\n          this.estimateNetworkConditions();\n        }, 60000); // Check every minute\n      }\n    }\n    \n    /**\n     * Estimate network conditions based on resource loading performance\n     */\n    estimateNetworkConditions() {\n      // This is a simplified implementation\n      // A real implementation would track resource load times\n      // and use them to estimate network conditions\n      \n      // For now, we'll use navigator.connection if available,\n      // or assume decent connectivity otherwise\n      if (navigator.connection) {\n        this.detectNetworkConditions();\n      }\n    }\n    \n    /**\n     * Register a component with the loading queue\n     * @param {string} componentId - ID of the component\n     * @param {Object} metadata - Component metadata\n     */\n    registerComponent(componentId, metadata) {\n      this.componentRegistry.set(componentId, {\n        id: componentId,\n        size: metadata.size || 0,\n        dependencies: metadata.dependencies || [],\n        path: metadata.path || null,\n        importance: metadata.importance || 'normal',\n        ...metadata\n      });\n    }\n    \n    /**\n     * Update loading priorities based on predictions\n     * @param {Array} predictions - Component predictions from the prediction engine\n     */\n    updatePriorities(predictions) {\n      // Clear existing queue contents\n      this.highPriority.clear();\n      this.mediumPriority.clear();\n      this.lowPriority.clear();\n      \n      // Process predictions and assign to appropriate queues\n      predictions.forEach(pred => {\n        const componentId = pred.componentId;\n        \n        // Skip already loaded or loading components\n        if (this.loadedComponents.has(componentId) || this.loadingComponents.has(componentId)) {\n          return;\n        }\n        \n        // Assign to priority queues based on prediction probability\n        if (pred.probability > this.options.highPriorityThreshold) {\n          this.highPriority.add(componentId);\n          this.prefetchResource(componentId);\n        } else if (pred.probability > this.options.mediumPriorityThreshold) {\n          this.mediumPriority.add(componentId);\n          this.preconnectResource(componentId);\n        } else {\n          this.lowPriority.add(componentId);\n        }\n      });\n      \n      // Start loading components based on priorities\n      this.processQueues();\n    }\n    \n    /**\n     * Process loading queues to load components in priority order\n     */\n    processQueues() {\n      // Determine how many components we can load concurrently\n      const availableSlots = this.calculateAvailableSlots();\n      let remainingSlots = availableSlots - this.loadingComponents.size;\n      \n      // Process high priority queue first\n      if (remainingSlots > 0) {\n        remainingSlots = this.processQueue(this.highPriority, remainingSlots, 'high');\n      }\n      \n      // Process medium priority queue next\n      if (remainingSlots > 0) {\n        remainingSlots = this.processQueue(this.mediumPriority, remainingSlots, 'medium');\n      }\n      \n      // Process low priority queue if we still have slots and good network\n      if (remainingSlots > 0 && this.hasGoodNetwork()) {\n        this.processQueue(this.lowPriority, remainingSlots, 'low');\n      }\n    }\n    \n    /**\n     * Process a specific queue to load components\n     * @param {Set} queue - Priority queue to process\n     * @param {number} slots - Number of available loading slots\n     * @param {string} priority - Priority level ('high', 'medium', 'low')\n     * @returns {number} - Remaining slots after processing\n     */\n    processQueue(queue, slots, priority) {\n      let remainingSlots = slots;\n      \n      // Convert queue to array for easier processing\n      const components = Array.from(queue);\n      \n      // Use slots for components from this queue\n      for (let i = 0; i < components.length && remainingSlots > 0; i++) {\n        const componentId = components[i];\n        this.loadComponent(componentId, priority);\n        remainingSlots--;\n        \n        // Remove from queue\n        queue.delete(componentId);\n      }\n      \n      return remainingSlots;\n    }\n    \n    /**\n     * Calculate the number of concurrent loads based on network conditions\n     * @returns {number} - Number of components to load concurrently\n     */\n    calculateAvailableSlots() {\n      if (!this.options.adaptToNetwork) {\n        return this.options.maxConcurrentLoads;\n      }\n      \n      // Adjust based on network conditions\n      const { effectiveType, downlink } = this.network;\n      \n      switch (effectiveType) {\n        case '4g':\n          return this.options.maxConcurrentLoads;\n        case '3g':\n          return Math.max(2, Math.floor(this.options.maxConcurrentLoads * 0.6));\n        case '2g':\n          return 1;\n        case 'slow-2g':\n          return 1;\n        default:\n          // If we don't know, use a conservative value based on downlink\n          if (downlink > 5) return this.options.maxConcurrentLoads;\n          if (downlink > 2) return Math.floor(this.options.maxConcurrentLoads * 0.6);\n          return 1;\n      }\n    }\n    \n    /**\n     * Check if current network conditions are good\n     * @returns {boolean} - Whether network conditions are good\n     */\n    hasGoodNetwork() {\n      if (!this.options.adaptToNetwork) {\n        return true;\n      }\n      \n      const { effectiveType, downlink, rtt } = this.network;\n      \n      // Consider good network if:\n      // - 4g or better effective type, or\n      // - downlink > 1.5Mbps, or\n      // - RTT < 300ms\n      return (\n        effectiveType === '4g' ||\n        downlink > 1.5 ||\n        (rtt && rtt < 300)\n      );\n    }\n    \n    /**\n     * Rebalance queues when conditions change\n     */\n    rebalanceQueues() {\n      // Adjust processing based on new network conditions\n      this.processQueues();\n    }\n    \n    /**\n     * Load a component\n     * @param {string} componentId - ID of the component to load\n     * @param {string} priority - Priority level ('high', 'medium', 'low')\n     */\n    loadComponent(componentId, priority) {\n      // Skip if already loaded or loading\n      if (this.loadedComponents.has(componentId) || this.loadingComponents.has(componentId)) {\n        return;\n      }\n      \n      // Ensure component is registered\n      const component = this.componentRegistry.get(componentId);\n      if (!component) {\n        console.warn(`AdaptiveLoadingQueue: Attempted to load unknown component: ${componentId}`);\n        return;\n      }\n      \n      // Mark as loading\n      this.loadingComponents.add(componentId);\n      \n      // In a real implementation, this would load the actual component\n      // through dynamic import or a similar mechanism\n      \n      // For this implementation, we'll simulate loading with a timeout\n      const loadTime = this.estimateLoadTime(component);\n      \n      setTimeout(() => {\n        // Mark as loaded\n        this.loadedComponents.add(componentId);\n        this.loadingComponents.delete(componentId);\n        \n        // Clean up any resource hints\n        this.cleanupResourceHint(componentId);\n        \n        // Process dependencies\n        this.processDependencies(component);\n        \n        // Process queues again in case we have room for more components\n        this.processQueues();\n        \n        console.debug(`AdaptiveLoadingQueue: Loaded component ${componentId} with ${priority} priority`);\n      }, loadTime);\n    }\n    \n    /**\n     * Process dependencies for a component\n     * @param {Object} component - Component metadata\n     */\n    processDependencies(component) {\n      if (!component.dependencies || component.dependencies.length === 0) {\n        return;\n      }\n      \n      // Load each dependency with medium priority\n      component.dependencies.forEach(dependencyId => {\n        if (!this.loadedComponents.has(dependencyId) && !this.loadingComponents.has(dependencyId)) {\n          // Add to medium priority queue\n          this.mediumPriority.add(dependencyId);\n        }\n      });\n    }\n    \n    /**\n     * Estimate load time for a component based on size and network conditions\n     * @param {Object} component - Component metadata\n     * @returns {number} - Estimated load time in milliseconds\n     */\n    estimateLoadTime(component) {\n      if (!this.options.adaptToNetwork) {\n        return 100; // Default load time\n      }\n      \n      const { downlink, rtt } = this.network;\n      const size = component.size || 10; // Size in KB, default 10KB if unknown\n      \n      // Basic formula: latency + (size / bandwidth)\n      const latency = rtt || 100; // ms\n      const bandwidth = downlink || 1; // Mbps\n      \n      // Convert KB to bits (× 8 × 1024), and Mbps to bps (× 1024 × 1024)\n      const transferTime = (size * 8 * 1024) / (bandwidth * 1024 * 1024) * 1000;\n      \n      return latency + transferTime;\n    }\n    \n    /**\n     * Add a prefetch hint for a component\n     * @param {string} componentId - ID of the component\n     */\n    prefetchResource(componentId) {\n      // Skip if already loaded, loading, or hint already exists\n      if (this.loadedComponents.has(componentId) || \n          this.loadingComponents.has(componentId) ||\n          this.resourceHints.has(componentId)) {\n        return;\n      }\n      \n      const component = this.componentRegistry.get(componentId);\n      if (!component || !component.path) return;\n      \n      // Create and add prefetch link\n      const link = document.createElement('link');\n      link.rel = 'prefetch';\n      link.as = 'script';\n      link.href = component.path;\n      \n      document.head.appendChild(link);\n      \n      // Register for cleanup\n      this.resourceHints.set(componentId, link);\n    }\n    \n    /**\n     * Add a preconnect hint for a component\n     * @param {string} componentId - ID of the component\n     */\n    preconnectResource(componentId) {\n      // Skip if already loaded, loading, or hint already exists\n      if (this.loadedComponents.has(componentId) || \n          this.loadingComponents.has(componentId) ||\n          this.resourceHints.has(componentId)) {\n        return;\n      }\n      \n      const component = this.componentRegistry.get(componentId);\n      if (!component || !component.path) return;\n      \n      // Extract domain from path\n      let domain;\n      try {\n        if (component.path.startsWith('http')) {\n          const url = new URL(component.path);\n          domain = `${url.protocol}//${url.hostname}`;\n        } else {\n          // Assume same origin\n          domain = window.location.origin;\n        }\n      } catch (error) {\n        return;\n      }\n      \n      // Create and add preconnect link\n      const link = document.createElement('link');\n      link.rel = 'preconnect';\n      link.href = domain;\n      \n      document.head.appendChild(link);\n      \n      // Register for cleanup\n      this.resourceHints.set(componentId, link);\n    }\n    \n    /**\n     * Clean up resource hint for a component\n     * @param {string} componentId - ID of the component\n     */\n    cleanupResourceHint(componentId) {\n      const hint = this.resourceHints.get(componentId);\n      if (hint) {\n        // Remove from DOM\n        if (hint.parentNode) {\n          hint.parentNode.removeChild(hint);\n        }\n        \n        // Remove from registry\n        this.resourceHints.delete(componentId);\n      }\n    }\n    \n    /**\n     * Check if a component is loaded\n     * @param {string} componentId - ID of the component\n     * @returns {boolean} - Whether the component is loaded\n     */\n    isLoaded(componentId) {\n      return this.loadedComponents.has(componentId);\n    }\n    \n    /**\n     * Check if a component is currently loading\n     * @param {string} componentId - ID of the component\n     * @returns {boolean} - Whether the component is loading\n     */\n    isLoading(componentId) {\n      return this.loadingComponents.has(componentId);\n    }\n    \n    /**\n     * Get the current queue state\n     * @returns {Object} - Current queue state\n     */\n    getQueueState() {\n      return {\n        high: Array.from(this.highPriority),\n        medium: Array.from(this.mediumPriority),\n        low: Array.from(this.lowPriority),\n        loading: Array.from(this.loadingComponents),\n        loaded: Array.from(this.loadedComponents),\n        network: { ...this.network }\n      };\n    }\n    \n    /**\n     * Clean up and destroy the queue\n     */\n    destroy() {\n      // Clear intervals if any\n      if (this.networkCheckInterval) {\n        clearInterval(this.networkCheckInterval);\n      }\n      \n      // Remove network event listeners\n      if (navigator.connection) {\n        navigator.connection.removeEventListener('change', this.detectNetworkConditions);\n      }\n      \n      // Clean up all resource hints\n      this.resourceHints.forEach(hint => {\n        if (hint.parentNode) {\n          hint.parentNode.removeChild(hint);\n        }\n      });\n      \n      // Clear all collections\n      this.highPriority.clear();\n      this.mediumPriority.clear();\n      this.lowPriority.clear();\n      this.loadingComponents.clear();\n      this.loadedComponents.clear();\n      this.componentRegistry.clear();\n      this.resourceHints.clear();\n    }\n  }\n  \n  export default AdaptiveLoadingQueue;","/**\n * Markov Chain Model for component usage prediction\n * \n * Implements a higher-order Markov Chain model to predict component usage\n * based on sequences of previous component interactions.\n */\n\n/**\n * MarkovChain class for component usage prediction\n */\nclass MarkovChain {\n    /**\n     * Create a new MarkovChain instance\n     * @param {Object} options - Configuration options\n     * @param {number} options.order - Order of the Markov Chain (default: 2)\n     * @param {number} options.learningRate - Learning rate for model updates (default: 0.05)\n     * @param {boolean} options.useBackoff - Whether to use backoff to lower-order models (default: true)\n     */\n    constructor(options = {}) {\n      this.options = {\n        order: 2,\n        learningRate: 0.05,\n        useBackoff: true,\n        ...options\n      };\n      \n      // Initialize data structures\n      this.transitionMatrices = new Map();\n      \n      // Initialize matrices for each order\n      for (let i = 1; i <= this.options.order; i++) {\n        this.transitionMatrices.set(i, new Map());\n      }\n      \n      // Metrics for performance tracking\n      this.metrics = {\n        sequencesObserved: 0,\n        predictions: 0,\n        correctPredictions: 0\n      };\n    }\n    \n    /**\n     * Process a new sequence of component usage\n     * @param {Array} sequence - Sequence of component IDs\n     */\n    observeSequence(sequence) {\n      if (!sequence || sequence.length < 2) return;\n      \n      this.metrics.sequencesObserved++;\n      \n      // Process each subsequence up to the specified order\n      for (let order = 1; order <= this.options.order; order++) {\n        if (sequence.length <= order) continue;\n        \n        // Process each subsequence of the current order\n        for (let i = 0; i <= sequence.length - order - 1; i++) {\n          const context = sequence.slice(i, i + order);\n          const nextComponent = sequence[i + order];\n          \n          this.updateTransition(order, context, nextComponent);\n        }\n      }\n    }\n    \n    /**\n     * Update transition probabilities for a specific context and next component\n     * @param {number} order - Order of the context\n     * @param {Array} context - Context sequence\n     * @param {string} nextComponent - Next component ID\n     */\n    updateTransition(order, context, nextComponent) {\n      const contextKey = this.getContextKey(context);\n      const matrix = this.transitionMatrices.get(order);\n      \n      // Initialize context map if not exists\n      if (!matrix.has(contextKey)) {\n        matrix.set(contextKey, new Map());\n      }\n      \n      const transitions = matrix.get(contextKey);\n      const currentCount = transitions.get(nextComponent) || 0;\n      \n      // Update count with learning rate\n      const newCount = currentCount * (1 - this.options.learningRate) + this.options.learningRate;\n      transitions.set(nextComponent, newCount);\n      \n      // Normalize the transition probabilities\n      this.normalizeTransitions(order, contextKey);\n    }\n    \n    /**\n     * Normalize transition probabilities for a specific context\n     * @param {number} order - Order of the context\n     * @param {string} contextKey - Context key\n     */\n    normalizeTransitions(order, contextKey) {\n      const matrix = this.transitionMatrices.get(order);\n      const transitions = matrix.get(contextKey);\n      \n      if (!transitions) return;\n      \n      // Calculate sum of all counts\n      const total = Array.from(transitions.values()).reduce((sum, count) => sum + count, 0);\n      \n      if (total > 0) {\n        // Normalize each count to a probability\n        transitions.forEach((count, component) => {\n          transitions.set(component, count / total);\n        });\n      }\n    }\n    \n    /**\n     * Generate a key from a context sequence\n     * @param {Array} context - Context sequence\n     * @returns {string} Context key\n     */\n    getContextKey(context) {\n      return context.join('|');\n    }\n    \n    /**\n     * Parse a context key back into an array\n     * @param {string} key - Context key\n     * @returns {Array} Context sequence\n     */\n    parseContextKey(key) {\n      return key.split('|');\n    }\n    \n    /**\n     * Predict the next component based on a context sequence\n     * @param {Array} context - Context sequence\n     * @param {Array} availableComponents - Available components to choose from\n     * @returns {Array} Predictions with probabilities\n     */\n    predict(context, availableComponents) {\n      if (!context || context.length === 0 || !availableComponents || availableComponents.length === 0) {\n        return [];\n      }\n      \n      // Use the longest possible subsequence up to the model's order\n      const effectiveContext = context.slice(-this.options.order);\n      const predictions = new Map();\n      \n      // Try to predict using the highest order first, then back off if needed\n      let usedOrder = 0;\n      for (let order = Math.min(this.options.order, effectiveContext.length); order >= 1; order--) {\n        const subContext = effectiveContext.slice(-order);\n        const contextKey = this.getContextKey(subContext);\n        const matrix = this.transitionMatrices.get(order);\n        \n        if (matrix.has(contextKey)) {\n          const transitions = matrix.get(contextKey);\n          \n          // Add predictions from this order\n          transitions.forEach((probability, componentId) => {\n            if (!predictions.has(componentId)) {\n              predictions.set(componentId, {\n                componentId,\n                probability: probability,\n                confidence: order / this.options.order, // Higher order = higher confidence\n                order\n              });\n            }\n          });\n          \n          // If we got predictions and don't want to use backoff, stop here\n          if (predictions.size > 0 && !this.options.useBackoff) {\n            usedOrder = order;\n            break;\n          }\n        }\n      }\n      \n      // If no predictions were found, use a uniform distribution over available components\n      if (predictions.size === 0) {\n        const uniformProbability = 1 / availableComponents.length;\n        availableComponents.forEach(component => {\n          predictions.set(component.id, {\n            componentId: component.id,\n            probability: uniformProbability,\n            confidence: 0.1, // Low confidence for uniform prediction\n            order: 0\n          });\n        });\n        usedOrder = 0;\n      }\n      \n      // Convert predictions to array and sort by probability\n      let result = Array.from(predictions.values());\n      \n      // Filter to only include available components\n      const availableIds = new Set(availableComponents.map(c => c.id));\n      result = result.filter(prediction => availableIds.has(prediction.componentId));\n      \n      // Sort by probability (highest first)\n      result.sort((a, b) => b.probability - a.probability);\n      \n      // Add priority based on probability\n      result = result.map(prediction => ({\n        ...prediction,\n        priority: this.getPriorityFromProbability(prediction.probability)\n      }));\n      \n      return result;\n    }\n    \n    /**\n     * Get priority level based on probability\n     * @param {number} probability - Probability value\n     * @returns {string} Priority level ('high', 'medium', 'low')\n     */\n    getPriorityFromProbability(probability) {\n      if (probability >= 0.7) {\n        return 'high';\n      } else if (probability >= 0.4) {\n        return 'medium';\n      } else {\n        return 'low';\n      }\n    }\n    \n    /**\n     * Update metrics based on prediction accuracy\n     * @param {string} actualComponent - Component that was actually used\n     * @param {Array} predictions - Predictions that were made\n     */\n    updateMetrics(actualComponent, predictions) {\n      this.metrics.predictions++;\n      \n      // Check if the actual component was in the top predictions\n      const topPredictions = predictions.slice(0, 3).map(p => p.componentId);\n      if (topPredictions.includes(actualComponent)) {\n        this.metrics.correctPredictions++;\n      }\n    }\n    \n    /**\n     * Get current prediction accuracy\n     * @returns {number} Prediction accuracy (0-1)\n     */\n    getAccuracy() {\n      if (this.metrics.predictions === 0) return 0;\n      return this.metrics.correctPredictions / this.metrics.predictions;\n    }\n    \n    /**\n     * Get model metrics\n     * @returns {Object} Model metrics\n     */\n    getMetrics() {\n      return {\n        ...this.metrics,\n        accuracy: this.getAccuracy(),\n        order: this.options.order,\n        matricesSizes: Array.from(this.transitionMatrices.entries()).map(([order, matrix]) => ({\n          order,\n          contexts: matrix.size,\n          totalTransitions: Array.from(matrix.values()).reduce((sum, transitions) => sum + transitions.size, 0)\n        }))\n      };\n    }\n    \n    /**\n     * Serialize the model for storage\n     * @returns {Object} Serialized model\n     */\n    serialize() {\n      const serialized = {\n        options: { ...this.options },\n        metrics: { ...this.metrics },\n        matrices: []\n      };\n      \n      // Serialize transition matrices\n      this.transitionMatrices.forEach((matrix, order) => {\n        const serializedMatrix = [];\n        \n        matrix.forEach((transitions, contextKey) => {\n          transitions.forEach((probability, componentId) => {\n            serializedMatrix.push({\n              context: contextKey,\n              component: componentId,\n              probability\n            });\n          });\n        });\n        \n        serialized.matrices.push({\n          order,\n          transitions: serializedMatrix\n        });\n      });\n      \n      return serialized;\n    }\n    \n    /**\n     * Deserialize a model from storage\n     * @param {Object} serialized - Serialized model\n     * @returns {MarkovChain} Deserialized model\n     */\n    static deserialize(serialized) {\n      if (!serialized || !serialized.options || !serialized.matrices) {\n        throw new Error('Invalid serialized Markov Chain model');\n      }\n      \n      const model = new MarkovChain(serialized.options);\n      \n      // Restore metrics\n      if (serialized.metrics) {\n        model.metrics = { ...serialized.metrics };\n      }\n      \n      // Restore transition matrices\n      serialized.matrices.forEach(matrixData => {\n        const { order, transitions } = matrixData;\n        const matrix = new Map();\n        \n        transitions.forEach(transitionData => {\n          const { context, component, probability } = transitionData;\n          \n          if (!matrix.has(context)) {\n            matrix.set(context, new Map());\n          }\n          \n          matrix.get(context).set(component, probability);\n        });\n        \n        model.transitionMatrices.set(order, matrix);\n      });\n      \n      return model;\n    }\n    \n    /**\n     * Reset the model\n     */\n    reset() {\n      // Clear all transition matrices\n      this.transitionMatrices.forEach(matrix => matrix.clear());\n      \n      // Reset metrics\n      this.metrics = {\n        sequencesObserved: 0,\n        predictions: 0,\n        correctPredictions: 0\n      };\n    }\n  }\n  \n  export default MarkovChain;","/**\n * Probabilistic Prediction Model\n * \n * Implements a conditional probability based model for component usage prediction,\n * using the formula: P(c_i|c_j) = N(c_i,c_j) / ∑_k N(c_k,c_j)\n */\n\n/**\n * ProbabilisticModel for component usage prediction based on conditional probabilities\n */\nclass ProbabilisticModel {\n    /**\n     * Create a new ProbabilisticModel instance\n     * @param {Object} options - Configuration options\n     * @param {number} options.learningRate - Learning rate for model updates (default: 0.03)\n     * @param {number} options.decayFactor - Decay factor for older transitions (default: 0.95)\n     * @param {number} options.highPriorityThreshold - Threshold for high priority (default: 0.75)\n     * @param {number} options.mediumPriorityThreshold - Threshold for medium priority (default: 0.4)\n     */\n    constructor(options = {}) {\n      this.options = {\n        learningRate: 0.03,\n        decayFactor: 0.95,\n        highPriorityThreshold: 0.75,\n        mediumPriorityThreshold: 0.4,\n        ...options\n      };\n      \n      // Initialize data structures\n      this.transitionMatrix = new Map(); // Stores P(c_i|c_j)\n      this.componentFrequency = new Map(); // Stores component usage frequency\n      this.cooccurrenceMatrix = new Map(); // Stores N(c_i,c_j)\n      \n      // Metrics for performance tracking\n      this.metrics = {\n        totalPredictions: 0,\n        correctPredictions: 0,\n        lastUpdateTime: Date.now()\n      };\n    }\n    \n    /**\n     * Process a transition between components\n     * @param {string} sourceComponent - Source component ID\n     * @param {string} targetComponent - Target component ID\n     * @param {number} weight - Weight of the transition (default: 1)\n     */\n    observeTransition(sourceComponent, targetComponent, weight = 1) {\n      if (!sourceComponent || !targetComponent) return;\n      \n      // Update component frequency\n      this.componentFrequency.set(\n        sourceComponent, \n        (this.componentFrequency.get(sourceComponent) || 0) + weight\n      );\n      this.componentFrequency.set(\n        targetComponent, \n        (this.componentFrequency.get(targetComponent) || 0) + weight\n      );\n      \n      // Update co-occurrence matrix\n      if (!this.cooccurrenceMatrix.has(sourceComponent)) {\n        this.cooccurrenceMatrix.set(sourceComponent, new Map());\n      }\n      \n      const sourceMap = this.cooccurrenceMatrix.get(sourceComponent);\n      const currentCount = sourceMap.get(targetComponent) || 0;\n      \n      // Apply learning rate to update\n      const newCount = currentCount * (1 - this.options.learningRate) + \n                      weight * this.options.learningRate;\n      \n      sourceMap.set(targetComponent, newCount);\n      \n      // Update transition matrix\n      this.updateTransitionProbabilities(sourceComponent);\n    }\n    \n    /**\n     * Process a sequence of component transitions\n     * @param {Array} sequence - Sequence of component IDs\n     */\n    observeSequence(sequence) {\n      if (!sequence || sequence.length < 2) return;\n      \n      // Process each pair of adjacent components in the sequence\n      for (let i = 0; i < sequence.length - 1; i++) {\n        this.observeTransition(sequence[i], sequence[i + 1]);\n      }\n    }\n    \n    /**\n     * Update transition probabilities for a specific source component\n     * @param {string} sourceComponent - Source component ID\n     */\n    updateTransitionProbabilities(sourceComponent) {\n      if (!this.cooccurrenceMatrix.has(sourceComponent)) return;\n      \n      const sourceMap = this.cooccurrenceMatrix.get(sourceComponent);\n      const total = Array.from(sourceMap.values()).reduce((sum, count) => sum + count, 0);\n      \n      // Skip if no transitions have been observed\n      if (total === 0) return;\n      \n      // Ensure transition matrix has an entry for this component\n      if (!this.transitionMatrix.has(sourceComponent)) {\n        this.transitionMatrix.set(sourceComponent, new Map());\n      }\n      \n      const transitionMap = this.transitionMatrix.get(sourceComponent);\n      \n      // Update transition probabilities\n      sourceMap.forEach((count, targetComponent) => {\n        // P(c_i|c_j) = N(c_i,c_j) / ∑_k N(c_k,c_j)\n        transitionMap.set(targetComponent, count / total);\n      });\n    }\n    \n    /**\n     * Get the transition probability between two components\n     * @param {string} sourceComponent - Source component ID\n     * @param {string} targetComponent - Target component ID\n     * @returns {number} - Transition probability P(target|source)\n     */\n    getTransitionProbability(sourceComponent, targetComponent) {\n      const transitionMap = this.transitionMatrix.get(sourceComponent);\n      \n      if (!transitionMap) return 0;\n      \n      return transitionMap.get(targetComponent) || 0;\n    }\n    \n    /**\n     * Predict next components based on current components\n     * @param {Array} currentComponents - Currently active component IDs\n     * @param {Array} availableComponents - Available components to predict from\n     * @returns {Array} - Predictions with probabilities\n     */\n    predict(currentComponents, availableComponents) {\n      if (!currentComponents || !availableComponents || \n          currentComponents.length === 0 || availableComponents.length === 0) {\n        return [];\n      }\n      \n      const predictions = new Map();\n      \n      // For each current component, get transition probabilities to other components\n      currentComponents.forEach(currentId => {\n        const transitionMap = this.transitionMatrix.get(currentId);\n        \n        if (!transitionMap) return;\n        \n        // For each available component, calculate probability\n        availableComponents.forEach(component => {\n          const componentId = component.id;\n          \n          // Skip if the component is already in the current set\n          if (currentComponents.includes(componentId)) return;\n          \n          // Get transition probability\n          const probability = transitionMap.get(componentId) || 0;\n          \n          // If we already have a prediction for this component, take the maximum\n          if (predictions.has(componentId)) {\n            const currentPrediction = predictions.get(componentId);\n            if (probability > currentPrediction.probability) {\n              currentPrediction.probability = probability;\n              currentPrediction.sourceComponent = currentId;\n            }\n          } else {\n            predictions.set(componentId, {\n              componentId,\n              probability,\n              sourceComponent: currentId,\n              confidence: probability > 0 ? 0.7 : 0.3\n            });\n          }\n        });\n      });\n      \n      // Convert to array and sort by probability\n      const result = Array.from(predictions.values());\n      \n      // Add priority based on thresholds\n      result.forEach(prediction => {\n        prediction.priority = this.getPriorityFromProbability(prediction.probability);\n      });\n      \n      // Sort by probability (highest first)\n      result.sort((a, b) => b.probability - a.probability);\n      \n      return result;\n    }\n    \n    /**\n     * Get priority level based on probability\n     * @param {number} probability - Prediction probability\n     * @returns {string} - Priority level ('high', 'medium', 'low')\n     */\n    getPriorityFromProbability(probability) {\n      if (probability >= this.options.highPriorityThreshold) {\n        return 'high';\n      } else if (probability >= this.options.mediumPriorityThreshold) {\n        return 'medium';\n      } else {\n        return 'low';\n      }\n    }\n    \n    /**\n     * Apply time decay to all transition counts\n     * This gradually reduces the influence of old transitions\n     */\n    applyTimeDecay() {\n      const now = Date.now();\n      const timeSinceLastUpdate = (now - this.metrics.lastUpdateTime) / 1000; // in seconds\n      \n      // Skip if not enough time has passed\n      if (timeSinceLastUpdate < 60) return; // Only decay after at least a minute\n      \n      // Calculate decay factor based on time passed\n      const decayFactor = Math.pow(this.options.decayFactor, timeSinceLastUpdate / 3600); // Hourly base\n      \n      // Apply decay to co-occurrence matrix\n      this.cooccurrenceMatrix.forEach((sourceMap, sourceId) => {\n        sourceMap.forEach((count, targetId) => {\n          sourceMap.set(targetId, count * decayFactor);\n        });\n        \n        // Update transition probabilities after decay\n        this.updateTransitionProbabilities(sourceId);\n      });\n      \n      // Update last update time\n      this.metrics.lastUpdateTime = now;\n    }\n    \n    /**\n     * Update metrics based on prediction accuracy\n     * @param {string} actualComponent - Component that was actually used\n     * @param {Array} predictions - Predictions that were made\n     */\n    updateMetrics(actualComponent, predictions) {\n      this.metrics.totalPredictions++;\n      \n      // Check if the actual component was among the top predictions\n      const predictedComponents = predictions.slice(0, 3).map(p => p.componentId);\n      \n      if (predictedComponents.includes(actualComponent)) {\n        this.metrics.correctPredictions++;\n      }\n    }\n    \n    /**\n     * Get current prediction accuracy\n     * @returns {number} - Accuracy as a value between 0 and 1\n     */\n    getAccuracy() {\n      if (this.metrics.totalPredictions === 0) return 0;\n      \n      return this.metrics.correctPredictions / this.metrics.totalPredictions;\n    }\n    \n    /**\n     * Get metrics about the model's performance\n     * @returns {Object} - Model metrics\n     */\n    getMetrics() {\n      return {\n        accuracy: this.getAccuracy(),\n        totalPredictions: this.metrics.totalPredictions,\n        correctPredictions: this.metrics.correctPredictions,\n        componentCount: this.componentFrequency.size,\n        transitionCount: Array.from(this.cooccurrenceMatrix.values())\n          .reduce((sum, map) => sum + map.size, 0),\n        mostFrequentComponents: this.getMostFrequentComponents(5)\n      };\n    }\n    \n    /**\n     * Get the most frequently used components\n     * @param {number} count - Number of components to return\n     * @returns {Array} - Most frequent components with their frequencies\n     */\n    getMostFrequentComponents(count = 5) {\n      return Array.from(this.componentFrequency.entries())\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, count)\n        .map(([componentId, frequency]) => ({ componentId, frequency }));\n    }\n    \n    /**\n     * Serialize the model for storage\n     * @returns {Object} - Serialized model\n     */\n    serialize() {\n      return {\n        options: { ...this.options },\n        metrics: { ...this.metrics },\n        componentFrequency: Array.from(this.componentFrequency.entries()).map(([id, freq]) => ({\n          id, frequency: freq\n        })),\n        cooccurrenceMatrix: Array.from(this.cooccurrenceMatrix.entries()).map(([sourceId, targetMap]) => ({\n          sourceId,\n          targets: Array.from(targetMap.entries()).map(([targetId, count]) => ({\n            targetId, count\n          }))\n        }))\n      };\n    }\n    \n    /**\n     * Deserialize a model from storage\n     * @param {Object} serialized - Serialized model data\n     * @returns {ProbabilisticModel} - Deserialized model\n     */\n    static deserialize(serialized) {\n      if (!serialized) throw new Error('Invalid serialized model data');\n      \n      const model = new ProbabilisticModel(serialized.options || {});\n      \n      // Restore metrics\n      if (serialized.metrics) {\n        model.metrics = { ...serialized.metrics };\n      }\n      \n      // Restore component frequency\n      if (serialized.componentFrequency) {\n        serialized.componentFrequency.forEach(({ id, frequency }) => {\n          model.componentFrequency.set(id, frequency);\n        });\n      }\n      \n      // Restore co-occurrence matrix\n      if (serialized.cooccurrenceMatrix) {\n        serialized.cooccurrenceMatrix.forEach(({ sourceId, targets }) => {\n          const targetMap = new Map();\n          targets.forEach(({ targetId, count }) => {\n            targetMap.set(targetId, count);\n          });\n          model.cooccurrenceMatrix.set(sourceId, targetMap);\n          \n          // Update transition probabilities\n          model.updateTransitionProbabilities(sourceId);\n        });\n      }\n      \n      return model;\n    }\n    \n    /**\n     * Reset the model\n     */\n    reset() {\n      this.transitionMatrix.clear();\n      this.componentFrequency.clear();\n      this.cooccurrenceMatrix.clear();\n      \n      this.metrics = {\n        totalPredictions: 0,\n        correctPredictions: 0,\n        lastUpdateTime: Date.now()\n      };\n    }\n    \n    /**\n     * Find the most likely path between components\n     * @param {string} startComponent - Starting component ID\n     * @param {string} endComponent - Ending component ID\n     * @param {number} maxLength - Maximum path length to consider\n     * @returns {Array} - Most likely path between the components\n     */\n    findMostLikelyPath(startComponent, endComponent, maxLength = 5) {\n      if (!startComponent || !endComponent) return [];\n      if (startComponent === endComponent) return [startComponent];\n      \n      // Simple breadth-first search to find paths\n      const queue = [[startComponent]];\n      const visited = new Set([startComponent]);\n      const paths = [];\n      \n      while (queue.length > 0 && paths.length < 3) {\n        const path = queue.shift();\n        const lastComponent = path[path.length - 1];\n        \n        // If we reached the maximum path length, skip\n        if (path.length > maxLength) continue;\n        \n        // Get transitions from the last component\n        const transitions = this.transitionMatrix.get(lastComponent);\n        if (!transitions) continue;\n        \n        // Check each possible next component\n        transitions.forEach((probability, nextComponent) => {\n          // Skip if probability is too low\n          if (probability < 0.1) return;\n          \n          // Skip if already visited (to avoid cycles)\n          if (visited.has(nextComponent)) return;\n          \n          // Create a new path with this component\n          const newPath = [...path, nextComponent];\n          \n          // If we reached the end component, add to paths\n          if (nextComponent === endComponent) {\n            paths.push({\n              path: newPath,\n              probability: this.calculatePathProbability(newPath)\n            });\n          } else {\n            // Otherwise, add to queue for further exploration\n            queue.push(newPath);\n            visited.add(nextComponent);\n          }\n        });\n      }\n      \n      // Sort paths by probability\n      paths.sort((a, b) => b.probability - a.probability);\n      \n      // Return the most likely path, or empty if none found\n      return paths.length > 0 ? paths[0].path : [];\n    }\n    \n    /**\n     * Calculate the probability of a path\n     * @param {Array} path - Sequence of component IDs\n     * @returns {number} - Path probability\n     */\n    calculatePathProbability(path) {\n      if (!path || path.length < 2) return 0;\n      \n      let probability = 1;\n      \n      // Multiply probabilities of each transition in the path\n      for (let i = 0; i < path.length - 1; i++) {\n        const transitionProb = this.getTransitionProbability(path[i], path[i + 1]);\n        probability *= transitionProb;\n      }\n      \n      return probability;\n    }\n    \n    /**\n     * Identify clusters of components that are frequently used together\n     * @param {number} minClusterSize - Minimum size of clusters to identify\n     * @param {number} probabilityThreshold - Minimum transition probability to consider\n     * @returns {Array} - Clusters of related components\n     */\n    identifyComponentClusters(minClusterSize = 3, probabilityThreshold = 0.3) {\n      // Build an adjacency list of components with strong relationships\n      const adjacencyList = new Map();\n      \n      this.transitionMatrix.forEach((transitions, sourceId) => {\n        adjacencyList.set(sourceId, []);\n        \n        transitions.forEach((probability, targetId) => {\n          if (probability >= probabilityThreshold) {\n            adjacencyList.get(sourceId).push(targetId);\n          }\n        });\n      });\n      \n      // Perform simple clustering (a basic form of community detection)\n      const componentIds = Array.from(this.componentFrequency.keys());\n      const visited = new Set();\n      const clusters = [];\n      \n      componentIds.forEach(componentId => {\n        if (visited.has(componentId)) return;\n        \n        // Start a new cluster\n        const cluster = [];\n        const queue = [componentId];\n        \n        while (queue.length > 0) {\n          const current = queue.shift();\n          \n          if (visited.has(current)) continue;\n          visited.add(current);\n          cluster.push(current);\n          \n          // Add neighbors to the queue\n          const neighbors = adjacencyList.get(current) || [];\n          neighbors.forEach(neighbor => {\n            if (!visited.has(neighbor)) {\n              queue.push(neighbor);\n            }\n          });\n        }\n        \n        // Only add clusters that meet the minimum size\n        if (cluster.length >= minClusterSize) {\n          clusters.push(cluster);\n        }\n      });\n      \n      return clusters;\n    }\n  }\n  \n  export default ProbabilisticModel;","/**\n * Transformer-based Prediction Model\n * \n * Implements a simplified transformer architecture for sequence prediction\n * of component usage. This is an experimental approach that provides better\n * handling of long-range dependencies in user interaction sequences.\n */\n\n/**\n * TransformerModel for sequence-based component prediction\n */\nclass TransformerModel {\n    /**\n     * Create a new TransformerModel\n     * @param {Object} options - Configuration options\n     * @param {number} options.embeddingSize - Size of component embeddings (default: 32)\n     * @param {number} options.sequenceLength - Maximum sequence length to consider (default: 10)\n     * @param {number} options.numHeads - Number of attention heads (default: 4)\n     * @param {number} options.learningRate - Learning rate for updates (default: 0.01)\n     */\n    constructor(options = {}) {\n      this.options = {\n        embeddingSize: 32,\n        sequenceLength: 10,\n        numHeads: 4,\n        learningRate: 0.01,\n        ...options\n      };\n      \n      // Component embeddings (id -> vector)\n      this.embeddings = new Map();\n      \n      // Attention matrices\n      this.attentionMatrices = Array(this.options.numHeads).fill().map(() => new Map());\n      \n      // Output projection matrix\n      this.outputProjection = new Map();\n      \n      // Component ID mapping (for internal use)\n      this.componentToIndex = new Map();\n      this.indexToComponent = new Map();\n      this.nextIndex = 0;\n      \n      // Training metrics\n      this.metrics = {\n        sequencesTrained: 0,\n        predictions: 0,\n        correctPredictions: 0,\n        accuracy: 0\n      };\n    }\n    \n    /**\n     * Get or create an index for a component ID\n     * @param {string} componentId - Component ID\n     * @returns {number} Component index\n     */\n    getComponentIndex(componentId) {\n      if (!this.componentToIndex.has(componentId)) {\n        const index = this.nextIndex++;\n        this.componentToIndex.set(componentId, index);\n        this.indexToComponent.set(index, componentId);\n        \n        // Initialize embedding vector with small random values\n        this.embeddings.set(componentId, this.createRandomVector());\n      }\n      \n      return this.componentToIndex.get(componentId);\n    }\n    \n    /**\n     * Create a random vector for initialization\n     * @returns {Array} Random vector of size embeddingSize\n     */\n    createRandomVector() {\n      return Array(this.options.embeddingSize).fill().map(() => \n        (Math.random() - 0.5) * 0.1\n      );\n    }\n    \n    /**\n     * Train the model on a sequence of component interactions\n     * @param {Array} sequence - Sequence of component IDs\n     */\n    trainOnSequence(sequence) {\n      if (!sequence || sequence.length < 2) return;\n      \n      this.metrics.sequencesTrained++;\n      \n      // Process only the most recent part of the sequence if it's too long\n      const effectiveSequence = sequence.slice(-this.options.sequenceLength);\n      \n      // Register all components in the sequence\n      effectiveSequence.forEach(componentId => this.getComponentIndex(componentId));\n      \n      // For each position, predict the next component\n      for (let i = 0; i < effectiveSequence.length - 1; i++) {\n        const context = effectiveSequence.slice(0, i + 1);\n        const targetComponent = effectiveSequence[i + 1];\n        \n        // Update model based on this example\n        this.updateModelForExample(context, targetComponent);\n      }\n    }\n    \n    /**\n     * Update model parameters for a single training example\n     * @param {Array} context - Context sequence of component IDs\n     * @param {string} targetComponent - Target component ID to predict\n     */\n    updateModelForExample(context, targetComponent) {\n      // Compute attention over the context\n      const attentionOutputs = this.computeAttention(context);\n      \n      // Make a prediction based on current model\n      const prediction = this.predictNextComponent(attentionOutputs);\n      \n      // Compute error (very simplified for this implementation)\n      const targetIndex = this.getComponentIndex(targetComponent);\n      \n      // Simple \"error signal\" - 1 for correct component, -1 for others\n      const errorSignal = new Map();\n      \n      for (const [componentId] of this.embeddings) {\n        const componentIndex = this.getComponentIndex(componentId);\n        errorSignal.set(componentId, componentIndex === targetIndex ? 1 : -1);\n      }\n      \n      // Update embeddings and attention matrices (simplified gradient descent)\n      this.updateParameters(context, errorSignal, attentionOutputs);\n    }\n    \n    /**\n     * Compute multi-head attention over a sequence\n     * @param {Array} sequence - Sequence of component IDs\n     * @returns {Array} Attention outputs\n     */\n    computeAttention(sequence) {\n      // This is a very simplified implementation of multi-head attention\n      // A real transformer would have more complex operations\n      \n      // Get embeddings for each component in the sequence\n      const embeddings = sequence.map(componentId => \n        this.embeddings.get(componentId) || this.createRandomVector()\n      );\n      \n      // Compute attention outputs for each head\n      const headOutputs = this.options.numHeads.map((_, headIndex) => {\n        const attentionMatrix = this.attentionMatrices[headIndex];\n        \n        // Compute attention scores (simplified)\n        const attentionScores = [];\n        \n        for (let i = 0; i < sequence.length; i++) {\n          const scores = [];\n          for (let j = 0; j < sequence.length; j++) {\n            // Get or create attention weight between these components\n            const sourceId = sequence[i];\n            const targetId = sequence[j];\n            const key = `${sourceId}|${targetId}`;\n            \n            if (!attentionMatrix.has(key)) {\n              // Initialize with a small random value\n              attentionMatrix.set(key, Math.random() * 0.1);\n            }\n            \n            scores.push(attentionMatrix.get(key));\n          }\n          \n          // Apply softmax to get attention weights\n          const softmaxScores = this.softmax(scores);\n          attentionScores.push(softmaxScores);\n        }\n        \n        // Apply attention weights to values (embeddings)\n        const outputs = [];\n        for (let i = 0; i < sequence.length; i++) {\n          const weightedSum = new Array(this.options.embeddingSize).fill(0);\n          \n          for (let j = 0; j < sequence.length; j++) {\n            const weight = attentionScores[i][j];\n            const embedding = embeddings[j];\n            \n            // Add weighted embedding\n            for (let k = 0; k < this.options.embeddingSize; k++) {\n              weightedSum[k] += weight * embedding[k];\n            }\n          }\n          \n          outputs.push(weightedSum);\n        }\n        \n        return outputs;\n      });\n      \n      // Combine outputs from all heads (just average for simplicity)\n      const combinedOutputs = [];\n      for (let i = 0; i < sequence.length; i++) {\n        const combined = new Array(this.options.embeddingSize).fill(0);\n        \n        for (let head = 0; head < this.options.numHeads; head++) {\n          const headOutput = headOutputs[head][i];\n          \n          for (let j = 0; j < this.options.embeddingSize; j++) {\n            combined[j] += headOutput[j] / this.options.numHeads;\n          }\n        }\n        \n        combinedOutputs.push(combined);\n      }\n      \n      return combinedOutputs;\n    }\n    \n    /**\n     * Apply softmax function to an array of scores\n     * @param {Array} scores - Array of scores\n     * @returns {Array} Softmax probabilities\n     */\n    softmax(scores) {\n      // Numerical stability: subtract max score\n      const maxScore = Math.max(...scores);\n      const expScores = scores.map(score => Math.exp(score - maxScore));\n      const sumExpScores = expScores.reduce((sum, exp) => sum + exp, 0);\n      return expScores.map(exp => exp / sumExpScores);\n    }\n    \n    /**\n     * Predict the next component based on attention outputs\n     * @param {Array} attentionOutputs - Outputs from attention mechanism\n     * @returns {Map} Probabilities for each component\n     */\n    predictNextComponent(attentionOutputs) {\n      if (!attentionOutputs || attentionOutputs.length === 0) {\n        return new Map();\n      }\n      \n      // Use the last position's output for prediction\n      const lastOutput = attentionOutputs[attentionOutputs.length - 1];\n      \n      // Compute scores for each possible next component\n      const scores = new Map();\n      \n      for (const [componentId, embedding] of this.embeddings.entries()) {\n        // Compute dot product between last output and component embedding\n        let score = 0;\n        for (let i = 0; i < this.options.embeddingSize; i++) {\n          score += lastOutput[i] * embedding[i];\n        }\n        \n        // Apply output projection if available\n        if (this.outputProjection.has(componentId)) {\n          score += this.outputProjection.get(componentId);\n        } else {\n          this.outputProjection.set(componentId, 0);\n        }\n        \n        scores.set(componentId, score);\n      }\n      \n      // Convert scores to probabilities with softmax\n      const scoreValues = Array.from(scores.values());\n      const probabilities = this.softmax(scoreValues);\n      \n      // Create component to probability mapping\n      const result = new Map();\n      let i = 0;\n      for (const componentId of scores.keys()) {\n        result.set(componentId, probabilities[i++]);\n      }\n      \n      return result;\n    }\n    \n    /**\n     * Update model parameters based on error signal\n     * @param {Array} context - Context sequence\n     * @param {Map} errorSignal - Error signal for each component\n     * @param {Array} attentionOutputs - Outputs from attention mechanism\n     */\n    updateParameters(context, errorSignal, attentionOutputs) {\n      // Update output projection weights\n      for (const [componentId, signal] of errorSignal.entries()) {\n        const currentValue = this.outputProjection.get(componentId) || 0;\n        this.outputProjection.set(\n          componentId,\n          currentValue + this.options.learningRate * signal\n        );\n      }\n      \n      // Update embeddings (very simplified)\n      for (const [componentId, signal] of errorSignal.entries()) {\n        const embedding = this.embeddings.get(componentId);\n        if (embedding) {\n          // Small adjustment based on signal\n          for (let i = 0; i < embedding.length; i++) {\n            embedding[i] += this.options.learningRate * signal * 0.01;\n          }\n        }\n      }\n      \n      // Update attention matrices (very simplified)\n      for (let head = 0; head < this.options.numHeads; head++) {\n        const attentionMatrix = this.attentionMatrices[head];\n        \n        for (let i = 0; i < context.length; i++) {\n          for (let j = 0; j < context.length; j++) {\n            const sourceId = context[i];\n            const targetId = context[j];\n            const key = `${sourceId}|${targetId}`;\n            \n            // Get current attention weight\n            const currentWeight = attentionMatrix.get(key) || 0;\n            \n            // Simple update based on target component's error signal\n            const targetSignal = errorSignal.get(context[context.length - 1]) || 0;\n            \n            // Update weight\n            attentionMatrix.set(\n              key,\n              currentWeight + this.options.learningRate * targetSignal * 0.01\n            );\n          }\n        }\n      }\n    }\n    \n    /**\n     * Predict the next component given a context sequence\n     * @param {Array} context - Context sequence of component IDs\n     * @param {Array} availableComponents - List of available components to consider\n     * @returns {Array} Predictions with probabilities\n     */\n    predict(context, availableComponents) {\n      if (!context || context.length === 0 || !availableComponents || availableComponents.length === 0) {\n        return [];\n      }\n      \n      // Process only the most recent part of the sequence if it's too long\n      const effectiveContext = context.slice(-this.options.sequenceLength);\n      \n      // Register any new components\n      effectiveContext.forEach(componentId => this.getComponentIndex(componentId));\n      \n      // Compute attention over the context\n      const attentionOutputs = this.computeAttention(effectiveContext);\n      \n      // Get probabilities for each component\n      const probabilities = this.predictNextComponent(attentionOutputs);\n      \n      // Create predictions array\n      const predictions = [];\n      \n      // Add predictions for available components\n      for (const component of availableComponents) {\n        const componentId = component.id;\n        \n        // Skip components already in context\n        if (effectiveContext.includes(componentId)) continue;\n        \n        // Get probability, defaulting to a small value if not found\n        const probability = probabilities.get(componentId) || 0.01;\n        \n        predictions.push({\n          componentId,\n          probability,\n          confidence: 0.8, // Transformers generally have higher confidence\n          priority: this.getPriorityFromProbability(probability),\n          model: 'transformer'\n        });\n      }\n      \n      // Sort by probability (highest first)\n      predictions.sort((a, b) => b.probability - a.probability);\n      \n      return predictions;\n    }\n    \n    /**\n     * Get priority level based on probability\n     * @param {number} probability - Probability value\n     * @returns {string} Priority level ('high', 'medium', 'low')\n     */\n    getPriorityFromProbability(probability) {\n      if (probability >= 0.7) {\n        return 'high';\n      } else if (probability >= 0.4) {\n        return 'medium';\n      } else {\n        return 'low';\n      }\n    }\n    \n    /**\n     * Update metrics based on prediction accuracy\n     * @param {string} actualComponent - Component that was actually used\n     * @param {Array} predictions - Predictions that were made\n     */\n    updateMetrics(actualComponent, predictions) {\n      this.metrics.predictions++;\n      \n      // Check if the actual component was the top prediction\n      if (predictions.length > 0 && predictions[0].componentId === actualComponent) {\n        this.metrics.correctPredictions++;\n      }\n      \n      // Update accuracy\n      this.metrics.accuracy = this.metrics.correctPredictions / this.metrics.predictions;\n    }\n    \n    /**\n     * Get model metrics\n     * @returns {Object} Model metrics\n     */\n    getMetrics() {\n      return {\n        ...this.metrics,\n        modelSize: {\n          components: this.embeddings.size,\n          embeddingSize: this.options.embeddingSize,\n          attentionHeads: this.options.numHeads,\n          parameters: this.calculateParameterCount()\n        }\n      };\n    }\n    \n    /**\n     * Calculate the total number of parameters in the model\n     * @returns {number} Parameter count\n     */\n    calculateParameterCount() {\n      const numComponents = this.embeddings.size;\n      \n      // Embedding parameters\n      const embeddingParams = numComponents * this.options.embeddingSize;\n      \n      // Attention matrix parameters\n      let attentionParams = 0;\n      for (const matrix of this.attentionMatrices) {\n        attentionParams += matrix.size;\n      }\n      \n      // Output projection parameters\n      const outputParams = this.outputProjection.size;\n      \n      return embeddingParams + attentionParams + outputParams;\n    }\n    \n    /**\n     * Serialize the model for storage\n     * @returns {Object} Serialized model\n     */\n    serialize() {\n      return {\n        options: { ...this.options },\n        metrics: { ...this.metrics },\n        embeddings: Array.from(this.embeddings.entries()).map(([id, vector]) => ({\n          id,\n          vector: [...vector]\n        })),\n        attentionMatrices: this.attentionMatrices.map(matrix => \n          Array.from(matrix.entries()).map(([key, value]) => ({ key, value }))\n        ),\n        outputProjection: Array.from(this.outputProjection.entries()).map(([id, value]) => ({\n          id,\n          value\n        })),\n        componentMapping: Array.from(this.componentToIndex.entries()).map(([id, index]) => ({\n          id,\n          index\n        })),\n        nextIndex: this.nextIndex\n      };\n    }\n    \n    /**\n     * Deserialize a model from storage\n     * @param {Object} serialized - Serialized model\n     * @returns {TransformerModel} Deserialized model\n     */\n    static deserialize(serialized) {\n      if (!serialized || !serialized.options || !serialized.embeddings) {\n        throw new Error('Invalid serialized Transformer model');\n      }\n      \n      const model = new TransformerModel(serialized.options);\n      \n      // Restore metrics\n      if (serialized.metrics) {\n        model.metrics = { ...serialized.metrics };\n      }\n      \n      // Restore embeddings\n      serialized.embeddings.forEach(({ id, vector }) => {\n        model.embeddings.set(id, [...vector]);\n      });\n      \n      // Restore attention matrices\n      serialized.attentionMatrices.forEach((matrixData, index) => {\n        const matrix = new Map();\n        matrixData.forEach(({ key, value }) => {\n          matrix.set(key, value);\n        });\n        model.attentionMatrices[index] = matrix;\n      });\n      \n      // Restore output projection\n      serialized.outputProjection.forEach(({ id, value }) => {\n        model.outputProjection.set(id, value);\n      });\n      \n      // Restore component mapping\n      serialized.componentMapping.forEach(({ id, index }) => {\n        model.componentToIndex.set(id, index);\n        model.indexToComponent.set(index, id);\n      });\n      \n      // Restore next index\n      model.nextIndex = serialized.nextIndex;\n      \n      return model;\n    }\n    \n    /**\n     * Reset the model\n     */\n    reset() {\n      // Clear all data structures\n      this.embeddings.clear();\n      this.attentionMatrices.forEach(matrix => matrix.clear());\n      this.outputProjection.clear();\n      this.componentToIndex.clear();\n      this.indexToComponent.clear();\n      this.nextIndex = 0;\n      \n      // Reset metrics\n      this.metrics = {\n        sequencesTrained: 0,\n        predictions: 0,\n        correctPredictions: 0,\n        accuracy: 0\n      };\n    }\n    \n    /**\n     * Optimize the model by pruning rarely used components\n     * @param {number} usageThreshold - Minimum usage count to keep a component\n     */\n    pruneComponents(usageThreshold = 5) {\n      // Get component usage counts\n      const usageCounts = new Map();\n      \n      // Count occurrences in attention matrices\n      this.attentionMatrices.forEach(matrix => {\n        Array.from(matrix.keys()).forEach(key => {\n          const [sourceId, targetId] = key.split('|');\n          usageCounts.set(sourceId, (usageCounts.get(sourceId) || 0) + 1);\n          usageCounts.set(targetId, (usageCounts.get(targetId) || 0) + 1);\n        });\n      });\n      \n      // Identify components to remove\n      const componentsToRemove = [];\n      \n      for (const [componentId] of this.embeddings) {\n        const usageCount = usageCounts.get(componentId) || 0;\n        if (usageCount < usageThreshold) {\n          componentsToRemove.push(componentId);\n        }\n      }\n      \n      // Remove embeddings for these components\n      componentsToRemove.forEach(componentId => {\n        this.embeddings.delete(componentId);\n        this.outputProjection.delete(componentId);\n        \n        // Remove from component mapping\n        const index = this.componentToIndex.get(componentId);\n        if (index !== undefined) {\n          this.componentToIndex.delete(componentId);\n          this.indexToComponent.delete(index);\n        }\n      });\n      \n      // Clean up attention matrices\n      this.attentionMatrices.forEach(matrix => {\n        const keysToRemove = [];\n        \n        for (const key of matrix.keys()) {\n          const [sourceId, targetId] = key.split('|');\n          if (componentsToRemove.includes(sourceId) || componentsToRemove.includes(targetId)) {\n            keysToRemove.push(key);\n          }\n        }\n        \n        keysToRemove.forEach(key => matrix.delete(key));\n      });\n      \n      return componentsToRemove.length;\n    }\n  }\n  \n  export default TransformerModel;"],"names":["BehaviorAnalysis","options","arguments","length","undefined","_classCallCheck","_objectSpread","anonymizeData","privacyCompliance","interactionHistory","componentGraph","Map","weightedEvents","sessionStart","Date","now","initializeEventWeights","_createClass","key","value","set","recordInteraction","componentId","data","timestamp","eventType","type","eventWeight","get","interactionMetric","calculateInteractionMetric","interaction","sessionTime","push","updateComponentGraph","pruneOldData","baseWeight","metric","duration","durationFactor","Math","min","viewportCoverage","recency","recencyFactor","has","recentInteractions","getRecentInteractions","previousInteractions","filter","i","previousInteraction","previousComponentId","componentRelationships","currentWeight","newWeight","count","slice","sort","a","b","maxAgeMs","getCurrentPatterns","serializeComponentGraph","interactionDensity","calculateInteractionDensity","primaryComponents","identifyPrimaryComponents","serialized","forEach","relationships","sourceId","weight","targetId","source","target","sessionDurationMinutes","max","componentMetrics","currentMetric","Array","from","entries","map","_ref","_ref2","_slicedToArray","importance","calculatePatternComplexity","uniqueComponents","Set","size","uniqueEventTypes","componentCount","edgeCount","maxPossibleEdges","graphDensity","componentVariety","eventVariety","detectNavigationPatterns","patterns","linear","branching","cyclic","dominant","outDegrees","avgOutDegree","reduce","sum","deg","variance","pow","cycles","detectCycles","patternScores","score","dominantPattern","_this","cycleCount","visited","recursionStack","detectCyclesFromNode","nodeId","path","add","neighbors","neighborId","_toConsumableArray","cycleStart","indexOf","_","generateFeatureVector","features","reset","exportAnalysisData","sessionId","toString","sessionDuration","interactionCount","patternComplexity","navigationPatterns","PredictionEngine","learningRate","modelType","transitionMatrix","predictions","confidenceThresholds","high","medium","low","metrics","correctPredictions","totalPredictions","lastAccuracy","predictComponentUsage","userPatterns","registeredComponents","predictUsingMarkovChain","predictUsingTransformer","predictUsingProbabilistic","updateTransitionMatrix","currentComponents","component","id","probability","confidence","currentId","transitionProb","getTransitionProbability","isPrimaryComponent","some","pc","primaryData","find","normalizedImportance","priority","getPriorityFromProbability","_this2","relationship","sourceMap","normalizeTransitionMatrix","transitions","total","values","val","sourceTransitions","_this3","recentSequence","targetComponents","includes","calculateMarkovProbability","sequence","_this4","prediction","enhancedProbability","model","updateMetrics","adjustConfidenceThresholds","getMetrics","accuracy","DynamicComponentLoader","networkAdaptation","preloadBatchSize","usePriority","loadingQueue","loadedComponents","loadingComponents","networkConditions","effectiveType","downlink","rtt","resourceHints","loadedComponentCount","preloadedComponentCount","usedPreloadedCount","networkSavings","registerComponent","componentData","module","dependencies","updateLoadingPriorities","clear","processLoadingQueue","batchSize","calculateBatchSize","remainingSlots","_i","_arr","componentsToLoad","_iterator","_createForOfIteratorHelper","_step","s","n","done","loadComponent","err","e","f","_this$networkConditio","floor","console","warn","concat","preloadResource","preconnectResource","loadTime","calculateLoadTime","setTimeout","loadDependencies","cleanupResourceHints","debug","dependencyId","sizeKB","_this$networkConditio2","latency","bandwidth","transferTime","preloadLink","document","createElement","rel","as","href","getResourceUrl","head","appendChild","domain","extractDomain","preconnectLink","hint","parentNode","removeChild","startsWith","url","URL","protocol","hostname","error","setNetworkConditions","conditions","markComponentUsed","getComponentPriority","isComponentLoaded","getRegisteredComponents","hitRate","preloadHitRate","networkSavingsKB","currentQueueSizes","detectNetworkConditions","defaultConditions","saveData","online","navigator","connection","onLine","categorizeNetworkQuality","_conditions","STORAGE_KEYS","INTERACTION_DATA","COMPONENT_USAGE","PREDICTION_MODEL","USER_PREFERENCES","SESSION_ID","LAST_CLEANUP","DEFAULT_EXPIRY","initializeStorage","isLocalStorageAvailable","window","_reactSmartMemoryStorage","localStorage","getItem","setItem","JSON","stringify","generateSessionId","testKey","removeItem","random","substr","cleanupOldData","retentionDays","lastCleanup","parseInt","_window$_reactSmartMe6","daysSinceLastCleanup","retentionThreshold","interactionsJson","interactions","parse","filteredInteractions","usageJson","usage","Object","keys","lastUsed","_window$_reactSmartMe7","_window$_reactSmartMe8","componentUsage","COMPLIANCE_MODES","GDPR","CCPA","LGPD","PIPEDA","MINIMAL","DEFAULT_CONFIG","anonymizeIp","minimizeData","hashUserIds","complianceMode","retentionPeriodDays","storageQuotaKB","privacyConfig","anonymizeInteractionData","interactionData","anonymized","userIp","userId","hashIdentifier","applyDataMinimization","_privacy","processingTime","ip","parts","split","join","identifier","hash","char","charCodeAt","padStart","sensitiveFields","field","applyGdprMinimization","applyCcpaMinimization","applyMinimalDataCollection","gdprSensitiveFields","location","_typeof","coordinates","city","postalCode","street","allowedFields","ReactSmartContext","createContext","trackInteraction","preloadComponent","getLoadingPriority","networkStatus","isInitialized","ReactSmartProvider","children","_ref$options","dataRetentionDays","disabled","predictionModel","logLevel","maxConcurrentLoads","maxCacheSize","compatibility","_useState","useState","_useState2","setIsInitialized","_useState3","_useState4","setNetworkStatus","behaviorAnalysis","useRef","predictionEngine","componentLoader","predictionWorker","logger","_console","_len","args","_key","apply","info","_console2","_len2","_key2","_console3","_len3","_key3","_console4","_len4","_key4","current","useEffect","Worker","import","meta","onmessage","_e$data","postMessage","action","updateNetworkStatus","addEventListener","networkCheckInterval","setInterval","removeEventListener","clearInterval","__REACTSMART_INSTANCE__","version","terminate","processedData","components","predictionAccuracy","preloadedCount","predictionMetrics","loaderMetrics","contextValue","_jsx","Provider","propTypes","PropTypes","node","isRequired","shape","bool","number","string","oneOf","withReactSmart","WrappedComponent","_options$analyzeInter","analyzeInteractions","_options$predictionTh","predictionThreshold","_options$preloadDepen","preloadDependencies","_options$importance","_options$trackMounts","trackMounts","_options$trackClicks","trackClicks","_options$trackVisibil","trackVisibility","_options$trackHovers","trackHovers","displayName","name","WithReactSmart","React","forwardRef","props","ref","_useContext","useContext","componentRef","rootRef","visibilityObserverRef","mountTimeRef","metadata","depId","parentComponent","disconnect","IntersectionObserver","firstVisibleTime","observer","entry","isIntersecting","subType","intersectionRatio","threshold","rootMargin","observe","element","handleClick","event","tagName","position","x","clientX","y","clientY","hoverTimeout","hoverStartTime","isHovering","handleMouseEnter","handleMouseLeave","clearTimeout","setRootRef","trackCustomInteraction","preloadDependency","reactSmartId","SmartRoute","Component","_ref$preloadRelated","preloadRelated","_ref$analyzeRouteUsag","analyzeRouteUsage","_ref$trackRouteMetric","trackRouteMetrics","_ref$priority","rest","_objectWithoutProperties","_excluded","routeId","relatedId","relatedRoute","isPreloadTarget","_props$location2","_props$location","_props$history","routeProps","queryParams","URLSearchParams","search","referrer","history","routeEnterTime","nextRoute","pathname","Route","render","SmartRouteV6","_readOnlyError","oneOfType","arrayOf","elementType","useComponentTracker","_options$trackUnmount","trackUnmounts","_options$dependencies","isVisibleRef","resolvedComponentId","registeredAt","lastVisibilityTimestamp","isVisible","trackClickEvent","useCallback","customData","trackHoverEvent","interactionType","trackClick","trackHover","useNetworkAware","_options$monitorChang","monitorChanges","_options$pollInterval","pollInterval","_options$onNetworkCha","onNetworkChange","localNetworkStatus","setLocalNetworkStatus","networkQuality","setNetworkQuality","_useState5","_useState6","isGoodConnection","setIsGoodConnection","_useState7","_useState8","isSaveDataMode","setIsSaveDataMode","quality","intervalId","newStatus","meetsQualityThreshold","minimumQuality","qualityLevels","currentIndex","thresholdIndex","getAdaptiveSize","sizeOptions","defaults","excellent","good","fair","poor","offline","selectResourceVariant","variants","qualityOrder","estimateLoadTime","isOnline","isFairConnection","isPoorConnection","isOffline","AdaptiveLoadingQueue","highPriorityThreshold","mediumPriorityThreshold","adaptToNetwork","highPriority","mediumPriority","lowPriority","componentRegistry","network","setupNetworkMonitoring","rebalanceQueues","estimateNetworkConditions","updatePriorities","pred","prefetchResource","processQueues","availableSlots","calculateAvailableSlots","processQueue","hasGoodNetwork","queue","slots","_this$network","_this$network2","cleanupResourceHint","processDependencies","_this$network3","link","origin","isLoaded","isLoading","getQueueState","loading","loaded","destroy","MarkovChain","order","useBackoff","transitionMatrices","sequencesObserved","observeSequence","context","nextComponent","updateTransition","contextKey","getContextKey","matrix","currentCount","newCount","normalizeTransitions","parseContextKey","predict","availableComponents","effectiveContext","_loop","subContext","uniformProbability","result","availableIds","c","actualComponent","topPredictions","p","getAccuracy","matricesSizes","contexts","totalTransitions","serialize","matrices","serializedMatrix","deserialize","Error","matrixData","transitionData","ProbabilisticModel","decayFactor","componentFrequency","cooccurrenceMatrix","lastUpdateTime","observeTransition","sourceComponent","targetComponent","updateTransitionProbabilities","transitionMap","currentPrediction","applyTimeDecay","timeSinceLastUpdate","predictedComponents","transitionCount","mostFrequentComponents","getMostFrequentComponents","frequency","_ref3","_ref4","freq","_ref5","_ref6","targetMap","targets","_ref7","_ref8","findMostLikelyPath","startComponent","endComponent","maxLength","paths","shift","lastComponent","newPath","calculatePathProbability","_ret","identifyComponentClusters","minClusterSize","probabilityThreshold","adjacencyList","componentIds","clusters","cluster","neighbor","_ref9","_ref0","_ref1","TransformerModel","embeddingSize","sequenceLength","numHeads","embeddings","attentionMatrices","fill","outputProjection","componentToIndex","indexToComponent","nextIndex","sequencesTrained","getComponentIndex","index","createRandomVector","trainOnSequence","effectiveSequence","updateModelForExample","attentionOutputs","computeAttention","predictNextComponent","targetIndex","errorSignal","_step$value","componentIndex","updateParameters","headOutputs","headIndex","attentionMatrix","attentionScores","scores","j","softmaxScores","softmax","outputs","weightedSum","embedding","k","combinedOutputs","combined","headOutput","maxScore","expScores","exp","sumExpScores","lastOutput","_iterator2","_step2","_step2$value","scoreValues","probabilities","_iterator3","_step3","_iterator4","_step4","_step4$value","signal","currentValue","_iterator5","_step5","_step5$value","targetSignal","_iterator6","_step6","modelSize","attentionHeads","parameters","calculateParameterCount","numComponents","embeddingParams","attentionParams","_iterator7","_step7","outputParams","vector","componentMapping","pruneComponents","usageThreshold","usageCounts","_key$split","_key$split2","componentsToRemove","_iterator8","_step8","_step8$value","usageCount","keysToRemove","_iterator9","_step9","_key$split3","_key$split4","_ref10"],"mappings":"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"}